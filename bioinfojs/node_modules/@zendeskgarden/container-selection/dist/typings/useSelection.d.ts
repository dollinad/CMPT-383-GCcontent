/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */
/// <reference types="react" />
interface IUseSelectionPropGetters<Item> {
    getContainerProps: <T>(options?: T) => T & React.HTMLProps<any>;
    getItemProps: <T extends IGetItemPropsOptions<Item>>(options: T, propGetterName?: string) => any;
}
export interface IUseSelectionState<Item> {
    focusedItem?: Item;
    selectedItem?: Item;
}
export interface IGetItemPropsOptions<Item> extends React.HTMLProps<any> {
    selectedAriaKey?: string;
    item: Item;
    focusRef: React.RefObject<any>;
    refKey?: string;
}
export declare type UseSelectionReturnValue<Item> = IUseSelectionState<Item> & IUseSelectionPropGetters<Item>;
export interface IUseSelectionProps<Item> {
    direction?: 'horizontal' | 'vertical' | 'both';
    defaultFocusedIndex?: number;
    defaultSelectedIndex?: number;
    rtl?: boolean;
    selectedItem?: Item;
    focusedItem?: Item;
    onSelect?: (selectedItem: Item) => void;
    onFocus?: (focusedItem?: Item) => void;
}
declare type onFocusCallback<Item> = (item?: Item) => void;
declare type onSelectCallback<Item> = (item?: Item) => void;
export declare type SELECTION_ACTION<Item> = {
    type: 'FOCUS';
    onFocus?: onFocusCallback<Item>;
    payload?: any;
    focusedItem?: any;
} | {
    type: 'INCREMENT';
    focusedItem?: any;
    selectedItem?: any;
    items: any[];
    onFocus?: onFocusCallback<Item>;
} | {
    type: 'DECREMENT';
    focusedItem?: any;
    selectedItem?: any;
    items: any[];
    onFocus?: onFocusCallback<Item>;
} | {
    type: 'HOME';
    onFocus?: onFocusCallback<Item>;
    items: any[];
} | {
    type: 'END';
    onFocus?: onFocusCallback<Item>;
    items: any[];
} | {
    type: 'MOUSE_SELECT';
    onSelect?: onSelectCallback<Item>;
    onFocus?: onFocusCallback<Item>;
    payload: any;
} | {
    type: 'KEYBOARD_SELECT';
    onSelect?: onSelectCallback<Item>;
    payload: any;
} | {
    type: 'EXIT_WIDGET';
    onFocus?: onFocusCallback<Item>;
};
/**
 * Custom hook to manage selection using the Roving Tab Index strategy
 *
 * https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex
 */
export declare function useSelection<Item = any>({ direction, defaultFocusedIndex, defaultSelectedIndex, rtl, selectedItem, focusedItem, onSelect, onFocus }?: IUseSelectionProps<Item>): UseSelectionReturnValue<Item>;
export {};
