{"ast":null,"code":"var _jsxFileName = \"/Users/dollina/Desktop/Project/bioinfojs/src/GCInput.js\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport { API_URL } from \"./constants/index.js\";\nimport { Row, Col, Container } from 'react-bootstrap';\nimport GCOutput from \"./GCOutput\";\n\nclass GCInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.refreshList = () => {\n      axios.get(API_URL).then(res => this.setState({\n        sequences: res.data\n      }));\n      console.log(\"SEQUENCES\", this.state.sequences);\n    };\n\n    this.handleSubmit = e => {\n      console.log(this.state);\n      axios.post(API_URL, this.state).then(response => {\n        console.log(response);\n        alert(\"Submitted\");\n        this.refreshList();\n      }).catch(error => {\n        console.log(error);\n      }); //axios.get(API_URL)\n      //    .then((response) =>  {\n      //       console.log(response.data)\n      //    })\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.state = {\n      value: '',\n      sequences: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  } //getOutput () {\n  //    axios.get(API_URL)\n  //        .then((response) =>  {\n  //            console.log(response.data[response.data.length-1])\n  //        })\n  //}\n\n\n  componentDidMount() {\n    this.refreshList();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }, \" Please enter your input DNA sequence (an array of A, T, G and C)\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      type: \"text\",\n      name: \"value\",\n      style: {\n        width: '350px',\n        height: '250px'\n      },\n      placeholder: \"DNA sequence comprising of A, T, G and C\",\n      value: this.state.value,\n      onChange: this.handleChange,\n      rows: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 28\n      }\n    }, \"Submit\")))), /*#__PURE__*/React.createElement(GCOutput, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default GCInput;","map":{"version":3,"sources":["/Users/dollina/Desktop/Project/bioinfojs/src/GCInput.js"],"names":["React","Component","axios","API_URL","Row","Col","Container","GCOutput","GCInput","constructor","props","refreshList","get","then","res","setState","sequences","data","console","log","state","handleSubmit","e","post","response","alert","catch","error","handleChange","value","target","bind","componentDidMount","render","width","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axios from \"axios\"\nimport { API_URL } from \"./constants/index.js\"\nimport { Row, Col, Container } from 'react-bootstrap';\n\nimport GCOutput from \"./GCOutput\"\n\nclass GCInput extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            value: '',\n            sequences: []\n        };\n        \n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n\n    //getOutput () {\n    //    axios.get(API_URL)\n    //        .then((response) =>  {\n    //            console.log(response.data[response.data.length-1])\n    //        })\n    //}\n\n    componentDidMount(){\n        this.refreshList()\n    }\n\n    refreshList = () => {\n        axios.get(API_URL)\n            .then(res => this.setState({sequences: res.data}))\n        \n         console.log(\"SEQUENCES\",this.state.sequences)\n    }\n\n\n    handleSubmit = e => {\n        console.log(this.state)\n        axios.post(API_URL, this.state)\n            .then(response => {\n                console.log(response)\n                alert(\"Submitted\")\n                this.refreshList()\n            })\n            .catch(error => {\n                console.log(error)\n            })\n        //axios.get(API_URL)\n        //    .then((response) =>  {\n        //       console.log(response.data)\n        //    })\n       \n\n    }\n\n\n    handleChange = e => {\n        this.setState({ value: e.target.value });\n    }\n\n    render() {\n        return (\n            <div>\n                <p> Please enter your input DNA sequence (an array of A, T, G and C)</p>\n                <form onSubmit={this.handleSubmit}>\n                    <div>\n                        <textarea\n                            type=\"text\" \n                            name=\"value\"\n                            style={{width:'350px', height:'250px'}}\n                            placeholder=\"DNA sequence comprising of A, T, G and C\"\n                            value={this.state.value}\n                            onChange={this.handleChange} \n                            rows=\"3\"\n                        />\n                        <p><button type =\"submit\">Submit</button></p>\n                    </div>\n                </form>\n                <GCOutput/>\n            </div>\n        )\n    }\n}\nexport default GCInput"]},"metadata":{},"sourceType":"module"}