{"ast":null,"code":"var Fraction = require('./src/fractions');\n\nvar Expression = require('./src/expressions').Expression;\n\nvar Equation = require('./src/equations');\n\nvar Parser = require('./src/parser');\n\nvar parse = function (input) {\n  var parser = new Parser();\n  var result = parser.parse(input);\n  return result;\n};\n\nvar toTex = function (input) {\n  if (input instanceof Fraction || input instanceof Expression || input instanceof Equation) {\n    return input.toTex();\n  } else if (input instanceof Array) {\n    return input.map(function (e) {\n      if (e instanceof Fraction) {\n        return e.toTex();\n      } else {\n        return e.toString();\n      }\n    }).join();\n  } else {\n    return input.toString();\n  }\n};\n\nmodule.exports = {\n  Fraction: Fraction,\n  Expression: Expression,\n  Equation: Equation,\n  parse: parse,\n  toTex: toTex\n};","map":{"version":3,"sources":["/Users/dollina/Desktop/Project/bioinfojs/node_modules/algebra.js/algebra.js"],"names":["Fraction","require","Expression","Equation","Parser","parse","input","parser","result","toTex","Array","map","e","toString","join","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,iBAAD,CAAtB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,mBAAD,CAAP,CAA6BC,UAA9C;;AACA,IAAIC,QAAQ,GAAGF,OAAO,CAAC,iBAAD,CAAtB;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,cAAD,CAApB;;AAGA,IAAII,KAAK,GAAG,UAASC,KAAT,EAAe;AAC1B,MAAIC,MAAM,GAAG,IAAIH,MAAJ,EAAb;AACA,MAAII,MAAM,GAAGD,MAAM,CAACF,KAAP,CAAaC,KAAb,CAAb;AACA,SAAOE,MAAP;AACA,CAJD;;AAMA,IAAIC,KAAK,GAAG,UAASH,KAAT,EAAgB;AACxB,MAAIA,KAAK,YAAYN,QAAjB,IAA6BM,KAAK,YAAYJ,UAA9C,IAA4DI,KAAK,YAAYH,QAAjF,EAA2F;AACvF,WAAOG,KAAK,CAACG,KAAN,EAAP;AACH,GAFD,MAEO,IAAIH,KAAK,YAAYI,KAArB,EAA4B;AAC/B,WAAOJ,KAAK,CAACK,GAAN,CACH,UAASC,CAAT,EAAY;AACR,UAAIA,CAAC,YAAYZ,QAAjB,EAA2B;AACvB,eAAOY,CAAC,CAACH,KAAF,EAAP;AACH,OAFD,MAEO;AACH,eAAOG,CAAC,CAACC,QAAF,EAAP;AACH;AACJ,KAPE,EAQLC,IARK,EAAP;AASH,GAVM,MAUA;AACH,WAAOR,KAAK,CAACO,QAAN,EAAP;AACH;AACJ,CAhBD;;AAkBAE,MAAM,CAACC,OAAP,GAAiB;AACbhB,EAAAA,QAAQ,EAAEA,QADG;AAEbE,EAAAA,UAAU,EAAEA,UAFC;AAGbC,EAAAA,QAAQ,EAAEA,QAHG;AAIbE,EAAAA,KAAK,EAAEA,KAJM;AAKbI,EAAAA,KAAK,EAAEA;AALM,CAAjB","sourcesContent":["var Fraction = require('./src/fractions');\nvar Expression = require('./src/expressions').Expression;\nvar Equation = require('./src/equations');\nvar Parser = require('./src/parser');\n\n\nvar parse = function(input){\n\tvar parser = new Parser();\n\tvar result = parser.parse(input);\n\treturn result;\n};\n\nvar toTex = function(input) {\n    if (input instanceof Fraction || input instanceof Expression || input instanceof Equation) {\n        return input.toTex();\n    } else if (input instanceof Array) {\n        return input.map(\n            function(e) {\n                if (e instanceof Fraction) {\n                    return e.toTex();\n                } else {\n                    return e.toString();\n                }\n            }\n        ).join();\n    } else {\n        return input.toString();\n    }\n};\n\nmodule.exports = {\n    Fraction: Fraction,\n    Expression: Expression,\n    Equation: Equation,\n    parse: parse,\n    toTex: toTex\n};\n"]},"metadata":{},"sourceType":"script"}