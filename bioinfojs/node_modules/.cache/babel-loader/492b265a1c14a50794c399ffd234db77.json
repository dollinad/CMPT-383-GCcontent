{"ast":null,"code":"var Fraction = require('./fractions');\n\nvar isInt = require('./helper').isInt;\n\nvar GREEK_LETTERS = require('./helper').GREEK_LETTERS;\n\nvar Expression = function (variable) {\n  this.constants = [];\n\n  if (typeof variable === \"string\") {\n    var v = new Variable(variable);\n    var t = new Term(v);\n    this.terms = [t];\n  } else if (isInt(variable)) {\n    this.constants = [new Fraction(variable, 1)];\n    this.terms = [];\n  } else if (variable instanceof Fraction) {\n    this.constants = [variable];\n    this.terms = [];\n  } else if (variable instanceof Term) {\n    this.terms = [variable];\n  } else if (typeof variable === \"undefined\") {\n    this.terms = [];\n  } else {\n    throw new TypeError(\"Invalid Argument (\" + variable.toString() + \"): Argument must be of type String, Integer, Fraction or Term.\");\n  }\n};\n\nExpression.prototype.constant = function () {\n  return this.constants.reduce(function (p, c) {\n    return p.add(c);\n  }, new Fraction(0, 1));\n};\n\nExpression.prototype.simplify = function () {\n  var copy = this.copy(); //simplify all terms\n\n  copy.terms = copy.terms.map(function (t) {\n    return t.simplify();\n  });\n\n  copy._sort();\n\n  copy._combineLikeTerms();\n\n  copy._moveTermsWithDegreeZeroToConstants();\n\n  copy._removeTermsWithCoefficientZero();\n\n  copy.constants = copy.constant().valueOf() === 0 ? [] : [copy.constant()];\n  return copy;\n};\n\nExpression.prototype.copy = function () {\n  var copy = new Expression(); //copy all constants\n\n  copy.constants = this.constants.map(function (c) {\n    return c.copy();\n  }); //copy all terms\n\n  copy.terms = this.terms.map(function (t) {\n    return t.copy();\n  });\n  return copy;\n};\n\nExpression.prototype.add = function (a, simplify) {\n  var thisExp = this.copy();\n\n  if (typeof a === \"string\" || a instanceof Term || isInt(a) || a instanceof Fraction) {\n    var exp = new Expression(a);\n    return thisExp.add(exp, simplify);\n  } else if (a instanceof Expression) {\n    var keepTerms = a.copy().terms;\n    thisExp.terms = thisExp.terms.concat(keepTerms);\n    thisExp.constants = thisExp.constants.concat(a.constants);\n\n    thisExp._sort();\n  } else {\n    throw new TypeError(\"Invalid Argument (\" + a.toString() + \"): Summand must be of type String, Expression, Term, Fraction or Integer.\");\n  }\n\n  return simplify || simplify === undefined ? thisExp.simplify() : thisExp;\n};\n\nExpression.prototype.subtract = function (a, simplify) {\n  var negative = a instanceof Expression ? a.multiply(-1) : new Expression(a).multiply(-1);\n  return this.add(negative, simplify);\n};\n\nExpression.prototype.multiply = function (a, simplify) {\n  var thisExp = this.copy();\n\n  if (typeof a === \"string\" || a instanceof Term || isInt(a) || a instanceof Fraction) {\n    var exp = new Expression(a);\n    return thisExp.multiply(exp, simplify);\n  } else if (a instanceof Expression) {\n    var thatExp = a.copy();\n    var newTerms = [];\n\n    for (var i = 0; i < thisExp.terms.length; i++) {\n      var thisTerm = thisExp.terms[i];\n\n      for (var j = 0; j < thatExp.terms.length; j++) {\n        var thatTerm = thatExp.terms[j];\n        newTerms.push(thisTerm.multiply(thatTerm, simplify));\n      }\n\n      for (var j = 0; j < thatExp.constants.length; j++) {\n        newTerms.push(thisTerm.multiply(thatExp.constants[j], simplify));\n      }\n    }\n\n    for (var i = 0; i < thatExp.terms.length; i++) {\n      var thatTerm = thatExp.terms[i];\n\n      for (var j = 0; j < thisExp.constants.length; j++) {\n        newTerms.push(thatTerm.multiply(thisExp.constants[j], simplify));\n      }\n    }\n\n    var newConstants = [];\n\n    for (var i = 0; i < thisExp.constants.length; i++) {\n      var thisConst = thisExp.constants[i];\n\n      for (var j = 0; j < thatExp.constants.length; j++) {\n        var thatConst = thatExp.constants[j];\n        var t = new Term();\n        t = t.multiply(thatConst, false);\n        t = t.multiply(thisConst, false);\n        newTerms.push(t);\n      }\n    }\n\n    thisExp.constants = newConstants;\n    thisExp.terms = newTerms;\n\n    thisExp._sort();\n  } else {\n    throw new TypeError(\"Invalid Argument (\" + a.toString() + \"): Multiplicand must be of type String, Expression, Term, Fraction or Integer.\");\n  }\n\n  return simplify || simplify === undefined ? thisExp.simplify() : thisExp;\n};\n\nExpression.prototype.divide = function (a, simplify) {\n  if (a instanceof Fraction || isInt(a)) {\n    if (a.valueOf() === 0) {\n      throw new EvalError(\"Divide By Zero\");\n    }\n\n    var copy = this.copy();\n\n    for (var i = 0; i < copy.terms.length; i++) {\n      var thisTerm = copy.terms[i];\n\n      for (var j = 0; j < thisTerm.coefficients.length; j++) {\n        thisTerm.coefficients[j] = thisTerm.coefficients[j].divide(a, simplify);\n      }\n    } //divide every constant by a\n\n\n    copy.constants = copy.constants.map(function (c) {\n      return c.divide(a, simplify);\n    });\n    return copy;\n  } else {\n    throw new TypeError(\"Invalid Argument (\" + a.toString() + \"): Divisor must be of type Fraction or Integer.\");\n  }\n};\n\nExpression.prototype.pow = function (a, simplify) {\n  if (isInt(a)) {\n    var copy = this.copy();\n\n    if (a === 0) {\n      return new Expression().add(1);\n    } else {\n      for (var i = 1; i < a; i++) {\n        copy = copy.multiply(this, simplify);\n      }\n\n      copy._sort();\n    }\n\n    return simplify || simplify === undefined ? copy.simplify() : copy;\n  } else {\n    throw new TypeError(\"Invalid Argument (\" + a.toString() + \"): Exponent must be of type Integer.\");\n  }\n};\n\nExpression.prototype.eval = function (values, simplify) {\n  var exp = new Expression();\n  exp.constants = simplify ? [this.constant()] : this.constants.slice(); //add all evaluated terms of this to exp\n\n  exp = this.terms.reduce(function (p, c) {\n    return p.add(c.eval(values, simplify), simplify);\n  }, exp);\n  return exp;\n};\n\nExpression.prototype.summation = function (variable, lower, upper, simplify) {\n  var thisExpr = this.copy();\n  var newExpr = new Expression();\n\n  for (var i = lower; i < upper + 1; i++) {\n    var sub = {};\n    sub[variable] = i;\n    newExpr = newExpr.add(thisExpr.eval(sub, simplify), simplify);\n  }\n\n  return newExpr;\n};\n\nExpression.prototype.toString = function () {\n  var str = \"\";\n\n  for (var i = 0; i < this.terms.length; i++) {\n    var term = this.terms[i];\n    str += (term.coefficients[0].valueOf() < 0 ? \" - \" : \" + \") + term.toString();\n  }\n\n  for (var i = 0; i < this.constants.length; i++) {\n    var constant = this.constants[i];\n    str += (constant.valueOf() < 0 ? \" - \" : \" + \") + constant.abs().toString();\n  }\n\n  if (str.substring(0, 3) === \" - \") {\n    return \"-\" + str.substring(3, str.length);\n  } else if (str.substring(0, 3) === \" + \") {\n    return str.substring(3, str.length);\n  } else {\n    return \"0\";\n  }\n};\n\nExpression.prototype.toTex = function (dict) {\n  var str = \"\";\n\n  for (var i = 0; i < this.terms.length; i++) {\n    var term = this.terms[i];\n    str += (term.coefficients[0].valueOf() < 0 ? \" - \" : \" + \") + term.toTex(dict);\n  }\n\n  for (var i = 0; i < this.constants.length; i++) {\n    var constant = this.constants[i];\n    str += (constant.valueOf() < 0 ? \" - \" : \" + \") + constant.abs().toTex();\n  }\n\n  if (str.substring(0, 3) === \" - \") {\n    return \"-\" + str.substring(3, str.length);\n  } else if (str.substring(0, 3) === \" + \") {\n    return str.substring(3, str.length);\n  } else {\n    return \"0\";\n  }\n};\n\nExpression.prototype._removeTermsWithCoefficientZero = function () {\n  this.terms = this.terms.filter(function (t) {\n    return t.coefficient().reduce().numer !== 0;\n  });\n  return this;\n};\n\nExpression.prototype._combineLikeTerms = function () {\n  function alreadyEncountered(term, encountered) {\n    for (var i = 0; i < encountered.length; i++) {\n      if (term.canBeCombinedWith(encountered[i])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  var newTerms = [];\n  var encountered = [];\n\n  for (var i = 0; i < this.terms.length; i++) {\n    var thisTerm = this.terms[i];\n\n    if (alreadyEncountered(thisTerm, encountered)) {\n      continue;\n    } else {\n      for (var j = i + 1; j < this.terms.length; j++) {\n        var thatTerm = this.terms[j];\n\n        if (thisTerm.canBeCombinedWith(thatTerm)) {\n          thisTerm = thisTerm.add(thatTerm);\n        }\n      }\n\n      newTerms.push(thisTerm);\n      encountered.push(thisTerm);\n    }\n  }\n\n  this.terms = newTerms;\n  return this;\n};\n\nExpression.prototype._moveTermsWithDegreeZeroToConstants = function () {\n  var keepTerms = [];\n  var constant = new Fraction(0, 1);\n\n  for (var i = 0; i < this.terms.length; i++) {\n    var thisTerm = this.terms[i];\n\n    if (thisTerm.variables.length === 0) {\n      constant = constant.add(thisTerm.coefficient());\n    } else {\n      keepTerms.push(thisTerm);\n    }\n  }\n\n  this.constants.push(constant);\n  this.terms = keepTerms;\n  return this;\n};\n\nExpression.prototype._sort = function () {\n  function sortTerms(a, b) {\n    var x = a.maxDegree();\n    var y = b.maxDegree();\n\n    if (x === y) {\n      var m = a.variables.length;\n      var n = b.variables.length;\n      return n - m;\n    } else {\n      return y - x;\n    }\n  }\n\n  this.terms = this.terms.sort(sortTerms);\n  return this;\n};\n\nExpression.prototype._hasVariable = function (variable) {\n  for (var i = 0; i < this.terms.length; i++) {\n    if (this.terms[i].hasVariable(variable)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nExpression.prototype._onlyHasVariable = function (variable) {\n  for (var i = 0; i < this.terms.length; i++) {\n    if (!this.terms[i].onlyHasVariable(variable)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nExpression.prototype._noCrossProductsWithVariable = function (variable) {\n  for (var i = 0; i < this.terms.length; i++) {\n    var term = this.terms[i];\n\n    if (term.hasVariable(variable) && !term.onlyHasVariable(variable)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nExpression.prototype._noCrossProducts = function () {\n  for (var i = 0; i < this.terms.length; i++) {\n    var term = this.terms[i];\n\n    if (term.variables.length > 1) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nExpression.prototype._maxDegree = function () {\n  return this.terms.reduce(function (p, c) {\n    return Math.max(p, c.maxDegree());\n  }, 1);\n};\n\nExpression.prototype._maxDegreeOfVariable = function (variable) {\n  return this.terms.reduce(function (p, c) {\n    return Math.max(p, c.maxDegreeOfVariable(variable));\n  }, 1);\n};\n\nExpression.prototype._quadraticCoefficients = function () {\n  // This function isn't used until everything has been moved to the LHS in Equation.solve.\n  var a;\n  var b = new Fraction(0, 1);\n\n  for (var i = 0; i < this.terms.length; i++) {\n    var thisTerm = this.terms[i];\n    a = thisTerm.maxDegree() === 2 ? thisTerm.coefficient().copy() : a;\n    b = thisTerm.maxDegree() === 1 ? thisTerm.coefficient().copy() : b;\n  }\n\n  var c = this.constant();\n  return {\n    a: a,\n    b: b,\n    c: c\n  };\n};\n\nExpression.prototype._cubicCoefficients = function () {\n  // This function isn't used until everything has been moved to the LHS in Equation.solve.\n  var a;\n  var b = new Fraction(0, 1);\n  var c = new Fraction(0, 1);\n\n  for (var i = 0; i < this.terms.length; i++) {\n    var thisTerm = this.terms[i];\n    a = thisTerm.maxDegree() === 3 ? thisTerm.coefficient().copy() : a;\n    b = thisTerm.maxDegree() === 2 ? thisTerm.coefficient().copy() : b;\n    c = thisTerm.maxDegree() === 1 ? thisTerm.coefficient().copy() : c;\n  }\n\n  var d = this.constant();\n  return {\n    a: a,\n    b: b,\n    c: c,\n    d: d\n  };\n};\n\nTerm = function (variable) {\n  if (variable instanceof Variable) {\n    this.variables = [variable.copy()];\n  } else if (typeof variable === \"undefined\") {\n    this.variables = [];\n  } else {\n    throw new TypeError(\"Invalid Argument (\" + variable.toString() + \"): Term initializer must be of type Variable.\");\n  }\n\n  this.coefficients = [new Fraction(1, 1)];\n};\n\nTerm.prototype.coefficient = function () {\n  //calculate the product of all coefficients\n  return this.coefficients.reduce(function (p, c) {\n    return p.multiply(c);\n  }, new Fraction(1, 1));\n};\n\nTerm.prototype.simplify = function () {\n  var copy = this.copy();\n  copy.coefficients = [this.coefficient()];\n  copy.combineVars();\n  return copy.sort();\n};\n\nTerm.prototype.combineVars = function () {\n  var uniqueVars = {};\n\n  for (var i = 0; i < this.variables.length; i++) {\n    var thisVar = this.variables[i];\n\n    if (thisVar.variable in uniqueVars) {\n      uniqueVars[thisVar.variable] += thisVar.degree;\n    } else {\n      uniqueVars[thisVar.variable] = thisVar.degree;\n    }\n  }\n\n  var newVars = [];\n\n  for (var v in uniqueVars) {\n    var newVar = new Variable(v);\n    newVar.degree = uniqueVars[v];\n    newVars.push(newVar);\n  }\n\n  this.variables = newVars;\n  return this;\n};\n\nTerm.prototype.copy = function () {\n  var copy = new Term();\n  copy.coefficients = this.coefficients.map(function (c) {\n    return c.copy();\n  });\n  copy.variables = this.variables.map(function (v) {\n    return v.copy();\n  });\n  return copy;\n};\n\nTerm.prototype.add = function (term) {\n  if (term instanceof Term && this.canBeCombinedWith(term)) {\n    var copy = this.copy();\n    copy.coefficients = [copy.coefficient().add(term.coefficient())];\n    return copy;\n  } else {\n    throw new TypeError(\"Invalid Argument (\" + term.toString() + \"): Summand must be of type String, Expression, Term, Fraction or Integer.\");\n  }\n};\n\nTerm.prototype.subtract = function (term) {\n  if (term instanceof Term && this.canBeCombinedWith(term)) {\n    var copy = this.copy();\n    copy.coefficients = [copy.coefficient().subtract(term.coefficient())];\n    return copy;\n  } else {\n    throw new TypeError(\"Invalid Argument (\" + term.toString() + \"): Subtrahend must be of type String, Expression, Term, Fraction or Integer.\");\n  }\n};\n\nTerm.prototype.multiply = function (a, simplify) {\n  var thisTerm = this.copy();\n\n  if (a instanceof Term) {\n    thisTerm.variables = thisTerm.variables.concat(a.variables);\n    thisTerm.coefficients = a.coefficients.concat(thisTerm.coefficients);\n  } else if (isInt(a) || a instanceof Fraction) {\n    var newCoef = isInt(a) ? new Fraction(a, 1) : a;\n\n    if (thisTerm.variables.length === 0) {\n      thisTerm.coefficients.push(newCoef);\n    } else {\n      thisTerm.coefficients.unshift(newCoef);\n    }\n  } else {\n    throw new TypeError(\"Invalid Argument (\" + a.toString() + \"): Multiplicand must be of type String, Expression, Term, Fraction or Integer.\");\n  }\n\n  return simplify || simplify === undefined ? thisTerm.simplify() : thisTerm;\n};\n\nTerm.prototype.divide = function (a, simplify) {\n  if (isInt(a) || a instanceof Fraction) {\n    var thisTerm = this.copy();\n    thisTerm.coefficients = thisTerm.coefficients.map(function (c) {\n      return c.divide(a, simplify);\n    });\n    return thisTerm;\n  } else {\n    throw new TypeError(\"Invalid Argument (\" + a.toString() + \"): Argument must be of type Fraction or Integer.\");\n  }\n};\n\nTerm.prototype.eval = function (values, simplify) {\n  var copy = this.copy();\n  var keys = Object.keys(values);\n  var exp = copy.coefficients.reduce(function (p, c) {\n    return p.multiply(c, simplify);\n  }, new Expression(1));\n\n  for (var i = 0; i < copy.variables.length; i++) {\n    var thisVar = copy.variables[i];\n    var ev;\n\n    if (thisVar.variable in values) {\n      var sub = values[thisVar.variable];\n\n      if (sub instanceof Fraction || sub instanceof Expression) {\n        ev = sub.pow(thisVar.degree);\n      } else if (isInt(sub)) {\n        ev = Math.pow(sub, thisVar.degree);\n      } else {\n        throw new TypeError(\"Invalid Argument (\" + sub + \"): Can only evaluate Expressions or Fractions.\");\n      }\n    } else {\n      ev = new Expression(thisVar.variable).pow(thisVar.degree);\n    }\n\n    exp = exp.multiply(ev, simplify);\n  }\n\n  return exp;\n};\n\nTerm.prototype.hasVariable = function (variable) {\n  for (var i = 0; i < this.variables.length; i++) {\n    if (this.variables[i].variable === variable) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nTerm.prototype.maxDegree = function () {\n  return this.variables.reduce(function (p, c) {\n    return Math.max(p, c.degree);\n  }, 1);\n};\n\nTerm.prototype.maxDegreeOfVariable = function (variable) {\n  return this.variables.reduce(function (p, c) {\n    return c.variable === variable ? Math.max(p, c.degree) : p;\n  }, 1);\n};\n\nTerm.prototype.canBeCombinedWith = function (term) {\n  var thisVars = this.variables;\n  var thatVars = term.variables;\n\n  if (thisVars.length != thatVars.length) {\n    return false;\n  }\n\n  var matches = 0;\n\n  for (var i = 0; i < thisVars.length; i++) {\n    for (var j = 0; j < thatVars.length; j++) {\n      if (thisVars[i].variable === thatVars[j].variable && thisVars[i].degree === thatVars[j].degree) {\n        matches += 1;\n      }\n    }\n  }\n\n  return matches === thisVars.length;\n};\n\nTerm.prototype.onlyHasVariable = function (variable) {\n  for (var i = 0; i < this.variables.length; i++) {\n    if (this.variables[i].variable != variable) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nTerm.prototype.sort = function () {\n  function sortVars(a, b) {\n    return b.degree - a.degree;\n  }\n\n  this.variables = this.variables.sort(sortVars);\n  return this;\n};\n\nTerm.prototype.toString = function () {\n  var str = \"\";\n\n  for (var i = 0; i < this.coefficients.length; i++) {\n    var coef = this.coefficients[i];\n\n    if (coef.abs().numer !== 1 || coef.abs().denom !== 1) {\n      str += \" * \" + coef.toString();\n    }\n  }\n\n  str = this.variables.reduce(function (p, c) {\n    return p.concat(c.toString());\n  }, str);\n  str = str.substring(0, 3) === \" * \" ? str.substring(3, str.length) : str;\n  str = str.substring(0, 1) === \"-\" ? str.substring(1, str.length) : str;\n  return str;\n};\n\nTerm.prototype.toTex = function (dict) {\n  var dict = dict === undefined ? {} : dict;\n  dict.multiplication = !(\"multiplication\" in dict) ? \"cdot\" : dict.multiplication;\n  var op = \" \\\\\" + dict.multiplication + \" \";\n  var str = \"\";\n\n  for (var i = 0; i < this.coefficients.length; i++) {\n    var coef = this.coefficients[i];\n\n    if (coef.abs().numer !== 1 || coef.abs().denom !== 1) {\n      str += op + coef.toTex();\n    }\n  }\n\n  str = this.variables.reduce(function (p, c) {\n    return p.concat(c.toTex());\n  }, str);\n  str = str.substring(0, op.length) === op ? str.substring(op.length, str.length) : str;\n  str = str.substring(0, 1) === \"-\" ? str.substring(1, str.length) : str;\n  str = str.substring(0, 7) === \"\\\\frac{-\" ? \"\\\\frac{\" + str.substring(7, str.length) : str;\n  return str;\n};\n\nvar Variable = function (variable) {\n  if (typeof variable === \"string\") {\n    this.variable = variable;\n    this.degree = 1;\n  } else {\n    throw new TypeError(\"Invalid Argument (\" + variable.toString() + \"): Variable initalizer must be of type String.\");\n  }\n};\n\nVariable.prototype.copy = function () {\n  var copy = new Variable(this.variable);\n  copy.degree = this.degree;\n  return copy;\n};\n\nVariable.prototype.toString = function () {\n  var degree = this.degree;\n  var variable = this.variable;\n\n  if (degree === 0) {\n    return \"\";\n  } else if (degree === 1) {\n    return variable;\n  } else {\n    return variable + \"^\" + degree;\n  }\n};\n\nVariable.prototype.toTex = function () {\n  var degree = this.degree;\n  var variable = this.variable;\n\n  if (GREEK_LETTERS.indexOf(variable) > -1) {\n    variable = \"\\\\\" + variable;\n  }\n\n  if (degree === 0) {\n    return \"\";\n  } else if (degree === 1) {\n    return variable;\n  } else {\n    return variable + \"^{\" + degree + \"}\";\n  }\n};\n\nmodule.exports = {\n  Expression: Expression,\n  Term: Term,\n  Variable: Variable\n};","map":{"version":3,"sources":["/Users/dollina/Desktop/Project/bioinfojs/node_modules/algebra.js/src/expressions.js"],"names":["Fraction","require","isInt","GREEK_LETTERS","Expression","variable","constants","v","Variable","t","Term","terms","TypeError","toString","prototype","constant","reduce","p","c","add","simplify","copy","map","_sort","_combineLikeTerms","_moveTermsWithDegreeZeroToConstants","_removeTermsWithCoefficientZero","valueOf","a","thisExp","exp","keepTerms","concat","undefined","subtract","negative","multiply","thatExp","newTerms","i","length","thisTerm","j","thatTerm","push","newConstants","thisConst","thatConst","divide","EvalError","coefficients","pow","eval","values","slice","summation","lower","upper","thisExpr","newExpr","sub","str","term","abs","substring","toTex","dict","filter","coefficient","numer","alreadyEncountered","encountered","canBeCombinedWith","variables","sortTerms","b","x","maxDegree","y","m","n","sort","_hasVariable","hasVariable","_onlyHasVariable","onlyHasVariable","_noCrossProductsWithVariable","_noCrossProducts","_maxDegree","Math","max","_maxDegreeOfVariable","maxDegreeOfVariable","_quadraticCoefficients","_cubicCoefficients","d","combineVars","uniqueVars","thisVar","degree","newVars","newVar","newCoef","unshift","keys","Object","ev","thisVars","thatVars","matches","sortVars","coef","denom","multiplication","op","indexOf","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAtB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAAP,CAAoBC,KAAhC;;AACA,IAAIC,aAAa,GAAGF,OAAO,CAAC,UAAD,CAAP,CAAoBE,aAAxC;;AAEA,IAAIC,UAAU,GAAG,UAASC,QAAT,EAAmB;AAChC,OAAKC,SAAL,GAAiB,EAAjB;;AAEA,MAAG,OAAOD,QAAP,KAAqB,QAAxB,EAAkC;AAC9B,QAAIE,CAAC,GAAG,IAAIC,QAAJ,CAAaH,QAAb,CAAR;AACA,QAAII,CAAC,GAAG,IAAIC,IAAJ,CAASH,CAAT,CAAR;AACA,SAAKI,KAAL,GAAa,CAACF,CAAD,CAAb;AACH,GAJD,MAIO,IAAGP,KAAK,CAACG,QAAD,CAAR,EAAoB;AACvB,SAAKC,SAAL,GAAiB,CAAC,IAAIN,QAAJ,CAAaK,QAAb,EAAuB,CAAvB,CAAD,CAAjB;AACA,SAAKM,KAAL,GAAa,EAAb;AACH,GAHM,MAGA,IAAGN,QAAQ,YAAYL,QAAvB,EAAiC;AACpC,SAAKM,SAAL,GAAiB,CAACD,QAAD,CAAjB;AACA,SAAKM,KAAL,GAAa,EAAb;AACH,GAHM,MAGA,IAAGN,QAAQ,YAAYK,IAAvB,EAA6B;AAChC,SAAKC,KAAL,GAAa,CAACN,QAAD,CAAb;AACH,GAFM,MAEA,IAAG,OAAOA,QAAP,KAAqB,WAAxB,EAAqC;AACxC,SAAKM,KAAL,GAAa,EAAb;AACH,GAFM,MAEF;AACD,UAAM,IAAIC,SAAJ,CAAc,uBAAuBP,QAAQ,CAACQ,QAAT,EAAvB,GAA6C,gEAA3D,CAAN;AACH;AACJ,CApBD;;AAsBAT,UAAU,CAACU,SAAX,CAAqBC,QAArB,GAAgC,YAAW;AACvC,SAAO,KAAKT,SAAL,CAAeU,MAAf,CAAsB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAAC,WAAOD,CAAC,CAACE,GAAF,CAAMD,CAAN,CAAP;AAAiB,GAArD,EAAsD,IAAIlB,QAAJ,CAAa,CAAb,EAAgB,CAAhB,CAAtD,CAAP;AACH,CAFD;;AAIAI,UAAU,CAACU,SAAX,CAAqBM,QAArB,GAAgC,YAAW;AACvC,MAAIC,IAAI,GAAG,KAAKA,IAAL,EAAX,CADuC,CAGvC;;AACAA,EAAAA,IAAI,CAACV,KAAL,GAAaU,IAAI,CAACV,KAAL,CAAWW,GAAX,CAAe,UAASb,CAAT,EAAW;AAAC,WAAOA,CAAC,CAACW,QAAF,EAAP;AAAqB,GAAhD,CAAb;;AAEAC,EAAAA,IAAI,CAACE,KAAL;;AACAF,EAAAA,IAAI,CAACG,iBAAL;;AACAH,EAAAA,IAAI,CAACI,mCAAL;;AACAJ,EAAAA,IAAI,CAACK,+BAAL;;AACAL,EAAAA,IAAI,CAACf,SAAL,GAAkBe,IAAI,CAACN,QAAL,GAAgBY,OAAhB,OAA8B,CAA9B,GAAkC,EAAlC,GAAuC,CAACN,IAAI,CAACN,QAAL,EAAD,CAAzD;AAEA,SAAOM,IAAP;AACH,CAbD;;AAeAjB,UAAU,CAACU,SAAX,CAAqBO,IAArB,GAA4B,YAAW;AACnC,MAAIA,IAAI,GAAG,IAAIjB,UAAJ,EAAX,CADmC,CAGnC;;AACAiB,EAAAA,IAAI,CAACf,SAAL,GAAiB,KAAKA,SAAL,CAAegB,GAAf,CAAmB,UAASJ,CAAT,EAAW;AAAC,WAAOA,CAAC,CAACG,IAAF,EAAP;AAAiB,GAAhD,CAAjB,CAJmC,CAKnC;;AACAA,EAAAA,IAAI,CAACV,KAAL,GAAa,KAAKA,KAAL,CAAWW,GAAX,CAAe,UAASb,CAAT,EAAW;AAAC,WAAOA,CAAC,CAACY,IAAF,EAAP;AAAiB,GAA5C,CAAb;AAEA,SAAOA,IAAP;AACH,CATD;;AAWAjB,UAAU,CAACU,SAAX,CAAqBK,GAArB,GAA2B,UAASS,CAAT,EAAYR,QAAZ,EAAsB;AAC7C,MAAIS,OAAO,GAAG,KAAKR,IAAL,EAAd;;AAEA,MAAI,OAAOO,CAAP,KAAc,QAAd,IAA0BA,CAAC,YAAYlB,IAAvC,IAA+CR,KAAK,CAAC0B,CAAD,CAApD,IAA2DA,CAAC,YAAY5B,QAA5E,EAAsF;AAClF,QAAI8B,GAAG,GAAG,IAAI1B,UAAJ,CAAewB,CAAf,CAAV;AACA,WAAOC,OAAO,CAACV,GAAR,CAAYW,GAAZ,EAAiBV,QAAjB,CAAP;AACH,GAHD,MAGO,IAAIQ,CAAC,YAAYxB,UAAjB,EAA6B;AAChC,QAAI2B,SAAS,GAAGH,CAAC,CAACP,IAAF,GAASV,KAAzB;AAEAkB,IAAAA,OAAO,CAAClB,KAAR,GAAgBkB,OAAO,CAAClB,KAAR,CAAcqB,MAAd,CAAqBD,SAArB,CAAhB;AACAF,IAAAA,OAAO,CAACvB,SAAR,GAAoBuB,OAAO,CAACvB,SAAR,CAAkB0B,MAAlB,CAAyBJ,CAAC,CAACtB,SAA3B,CAApB;;AACAuB,IAAAA,OAAO,CAACN,KAAR;AACH,GANM,MAMA;AACH,UAAM,IAAIX,SAAJ,CAAc,uBAAuBgB,CAAC,CAACf,QAAF,EAAvB,GAAsC,2EAApD,CAAN;AACH;;AAED,SAAQO,QAAQ,IAAIA,QAAQ,KAAKa,SAA1B,GAAuCJ,OAAO,CAACT,QAAR,EAAvC,GAA4DS,OAAnE;AACH,CAjBD;;AAmBAzB,UAAU,CAACU,SAAX,CAAqBoB,QAArB,GAAgC,UAASN,CAAT,EAAYR,QAAZ,EAAsB;AAClD,MAAIe,QAAQ,GAAIP,CAAC,YAAYxB,UAAd,GAA4BwB,CAAC,CAACQ,QAAF,CAAW,CAAC,CAAZ,CAA5B,GAA6C,IAAIhC,UAAJ,CAAewB,CAAf,EAAkBQ,QAAlB,CAA2B,CAAC,CAA5B,CAA5D;AACA,SAAO,KAAKjB,GAAL,CAASgB,QAAT,EAAmBf,QAAnB,CAAP;AACH,CAHD;;AAKAhB,UAAU,CAACU,SAAX,CAAqBsB,QAArB,GAAgC,UAASR,CAAT,EAAYR,QAAZ,EAAsB;AAClD,MAAIS,OAAO,GAAG,KAAKR,IAAL,EAAd;;AAEA,MAAI,OAAOO,CAAP,KAAc,QAAd,IAA0BA,CAAC,YAAYlB,IAAvC,IAA+CR,KAAK,CAAC0B,CAAD,CAApD,IAA2DA,CAAC,YAAY5B,QAA5E,EAAsF;AAClF,QAAI8B,GAAG,GAAG,IAAI1B,UAAJ,CAAewB,CAAf,CAAV;AACA,WAAOC,OAAO,CAACO,QAAR,CAAiBN,GAAjB,EAAsBV,QAAtB,CAAP;AACH,GAHD,MAGO,IAAIQ,CAAC,YAAYxB,UAAjB,EAA6B;AAChC,QAAIiC,OAAO,GAAGT,CAAC,CAACP,IAAF,EAAd;AACA,QAAIiB,QAAQ,GAAG,EAAf;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,OAAO,CAAClB,KAAR,CAAc6B,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3C,UAAIE,QAAQ,GAAGZ,OAAO,CAAClB,KAAR,CAAc4B,CAAd,CAAf;;AAEA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAAC1B,KAAR,CAAc6B,MAAlC,EAA0CE,CAAC,EAA3C,EAA+C;AAC3C,YAAIC,QAAQ,GAAGN,OAAO,CAAC1B,KAAR,CAAc+B,CAAd,CAAf;AACAJ,QAAAA,QAAQ,CAACM,IAAT,CAAcH,QAAQ,CAACL,QAAT,CAAkBO,QAAlB,EAA4BvB,QAA5B,CAAd;AACH;;AAED,WAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAAC/B,SAAR,CAAkBkC,MAAtC,EAA8CE,CAAC,EAA/C,EAAmD;AAC/CJ,QAAAA,QAAQ,CAACM,IAAT,CAAcH,QAAQ,CAACL,QAAT,CAAkBC,OAAO,CAAC/B,SAAR,CAAkBoC,CAAlB,CAAlB,EAAwCtB,QAAxC,CAAd;AACH;AACJ;;AAED,SAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAAC1B,KAAR,CAAc6B,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3C,UAAII,QAAQ,GAAGN,OAAO,CAAC1B,KAAR,CAAc4B,CAAd,CAAf;;AAEA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,OAAO,CAACvB,SAAR,CAAkBkC,MAAtC,EAA8CE,CAAC,EAA/C,EAAmD;AAC/CJ,QAAAA,QAAQ,CAACM,IAAT,CAAcD,QAAQ,CAACP,QAAT,CAAkBP,OAAO,CAACvB,SAAR,CAAkBoC,CAAlB,CAAlB,EAAwCtB,QAAxC,CAAd;AACH;AACJ;;AAED,QAAIyB,YAAY,GAAG,EAAnB;;AAEA,SAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,OAAO,CAACvB,SAAR,CAAkBkC,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AAC/C,UAAIO,SAAS,GAAGjB,OAAO,CAACvB,SAAR,CAAkBiC,CAAlB,CAAhB;;AAEA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAAC/B,SAAR,CAAkBkC,MAAtC,EAA8CE,CAAC,EAA/C,EAAmD;AAC/C,YAAIK,SAAS,GAAGV,OAAO,CAAC/B,SAAR,CAAkBoC,CAAlB,CAAhB;AACA,YAAIjC,CAAC,GAAG,IAAIC,IAAJ,EAAR;AACAD,QAAAA,CAAC,GAAGA,CAAC,CAAC2B,QAAF,CAAWW,SAAX,EAAsB,KAAtB,CAAJ;AACAtC,QAAAA,CAAC,GAAGA,CAAC,CAAC2B,QAAF,CAAWU,SAAX,EAAsB,KAAtB,CAAJ;AACAR,QAAAA,QAAQ,CAACM,IAAT,CAAcnC,CAAd;AACH;AACJ;;AAEDoB,IAAAA,OAAO,CAACvB,SAAR,GAAoBuC,YAApB;AACAhB,IAAAA,OAAO,CAAClB,KAAR,GAAgB2B,QAAhB;;AACAT,IAAAA,OAAO,CAACN,KAAR;AACH,GA1CM,MA0CA;AACH,UAAM,IAAIX,SAAJ,CAAc,uBAAuBgB,CAAC,CAACf,QAAF,EAAvB,GAAsC,gFAApD,CAAN;AACH;;AAED,SAAQO,QAAQ,IAAIA,QAAQ,KAAKa,SAA1B,GAAuCJ,OAAO,CAACT,QAAR,EAAvC,GAA4DS,OAAnE;AACH,CArDD;;AAuDAzB,UAAU,CAACU,SAAX,CAAqBkC,MAArB,GAA8B,UAASpB,CAAT,EAAYR,QAAZ,EAAsB;AAChD,MAAIQ,CAAC,YAAY5B,QAAb,IAAyBE,KAAK,CAAC0B,CAAD,CAAlC,EAAuC;AAEnC,QAAIA,CAAC,CAACD,OAAF,OAAgB,CAApB,EAAuB;AACnB,YAAM,IAAIsB,SAAJ,CAAc,gBAAd,CAAN;AACH;;AAED,QAAI5B,IAAI,GAAG,KAAKA,IAAL,EAAX;;AAEA,SAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,IAAI,CAACV,KAAL,CAAW6B,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,UAAIE,QAAQ,GAAGpB,IAAI,CAACV,KAAL,CAAW4B,CAAX,CAAf;;AAEA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACS,YAAT,CAAsBV,MAA1C,EAAkDE,CAAC,EAAnD,EAAuD;AACnDD,QAAAA,QAAQ,CAACS,YAAT,CAAsBR,CAAtB,IAA2BD,QAAQ,CAACS,YAAT,CAAsBR,CAAtB,EAAyBM,MAAzB,CAAgCpB,CAAhC,EAAmCR,QAAnC,CAA3B;AACH;AACJ,KAdkC,CAgBnC;;;AACAC,IAAAA,IAAI,CAACf,SAAL,GAAiBe,IAAI,CAACf,SAAL,CAAegB,GAAf,CAAmB,UAASJ,CAAT,EAAW;AAAC,aAAOA,CAAC,CAAC8B,MAAF,CAASpB,CAAT,EAAWR,QAAX,CAAP;AAA6B,KAA5D,CAAjB;AAEA,WAAOC,IAAP;AACH,GApBD,MAoBO;AACH,UAAM,IAAIT,SAAJ,CAAc,uBAAuBgB,CAAC,CAACf,QAAF,EAAvB,GAAsC,iDAApD,CAAN;AACH;AACJ,CAxBD;;AA0BAT,UAAU,CAACU,SAAX,CAAqBqC,GAArB,GAA2B,UAASvB,CAAT,EAAYR,QAAZ,EAAsB;AAC7C,MAAIlB,KAAK,CAAC0B,CAAD,CAAT,EAAc;AACV,QAAIP,IAAI,GAAG,KAAKA,IAAL,EAAX;;AAEA,QAAIO,CAAC,KAAK,CAAV,EAAa;AACT,aAAO,IAAIxB,UAAJ,GAAiBe,GAAjB,CAAqB,CAArB,CAAP;AACH,KAFD,MAEO;AACH,WAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,CAApB,EAAuBW,CAAC,EAAxB,EAA4B;AACxBlB,QAAAA,IAAI,GAAGA,IAAI,CAACe,QAAL,CAAc,IAAd,EAAoBhB,QAApB,CAAP;AACH;;AAEDC,MAAAA,IAAI,CAACE,KAAL;AACH;;AAED,WAAQH,QAAQ,IAAIA,QAAQ,KAAKa,SAA1B,GAAuCZ,IAAI,CAACD,QAAL,EAAvC,GAAyDC,IAAhE;AACH,GAdD,MAcO;AACH,UAAM,IAAIT,SAAJ,CAAc,uBAAuBgB,CAAC,CAACf,QAAF,EAAvB,GAAsC,sCAApD,CAAN;AACH;AACJ,CAlBD;;AAoBAT,UAAU,CAACU,SAAX,CAAqBsC,IAArB,GAA4B,UAASC,MAAT,EAAiBjC,QAAjB,EAA2B;AACnD,MAAIU,GAAG,GAAG,IAAI1B,UAAJ,EAAV;AACA0B,EAAAA,GAAG,CAACxB,SAAJ,GAAiBc,QAAQ,GAAG,CAAC,KAAKL,QAAL,EAAD,CAAH,GAAuB,KAAKT,SAAL,CAAegD,KAAf,EAAhD,CAFmD,CAInD;;AACAxB,EAAAA,GAAG,GAAG,KAAKnB,KAAL,CAAWK,MAAX,CAAkB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAAC,WAAOD,CAAC,CAACE,GAAF,CAAMD,CAAC,CAACkC,IAAF,CAAOC,MAAP,EAAcjC,QAAd,CAAN,EAA8BA,QAA9B,CAAP;AAAgD,GAAhF,EAAiFU,GAAjF,CAAN;AAEA,SAAOA,GAAP;AACH,CARD;;AAUA1B,UAAU,CAACU,SAAX,CAAqByC,SAArB,GAAiC,UAASlD,QAAT,EAAmBmD,KAAnB,EAA0BC,KAA1B,EAAiCrC,QAAjC,EAA2C;AAC3E,MAAIsC,QAAQ,GAAG,KAAKrC,IAAL,EAAf;AACA,MAAIsC,OAAO,GAAG,IAAIvD,UAAJ,EAAd;;AACA,OAAI,IAAImC,CAAC,GAAGiB,KAAZ,EAAmBjB,CAAC,GAAIkB,KAAK,GAAG,CAAhC,EAAoClB,CAAC,EAArC,EAAyC;AACxC,QAAIqB,GAAG,GAAG,EAAV;AACAA,IAAAA,GAAG,CAACvD,QAAD,CAAH,GAAgBkC,CAAhB;AACAoB,IAAAA,OAAO,GAAGA,OAAO,CAACxC,GAAR,CAAYuC,QAAQ,CAACN,IAAT,CAAcQ,GAAd,EAAmBxC,QAAnB,CAAZ,EAA0CA,QAA1C,CAAV;AACA;;AACD,SAAOuC,OAAP;AACA,CATD;;AAWAvD,UAAU,CAACU,SAAX,CAAqBD,QAArB,GAAgC,YAAW;AACvC,MAAIgD,GAAG,GAAG,EAAV;;AAEA,OAAK,IAAItB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK5B,KAAL,CAAW6B,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,QAAIuB,IAAI,GAAG,KAAKnD,KAAL,CAAW4B,CAAX,CAAX;AAEAsB,IAAAA,GAAG,IAAI,CAACC,IAAI,CAACZ,YAAL,CAAkB,CAAlB,EAAqBvB,OAArB,KAAiC,CAAjC,GAAqC,KAArC,GAA6C,KAA9C,IAAuDmC,IAAI,CAACjD,QAAL,EAA9D;AACH;;AAED,OAAK,IAAI0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKjC,SAAL,CAAekC,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC5C,QAAIxB,QAAQ,GAAG,KAAKT,SAAL,CAAeiC,CAAf,CAAf;AAEAsB,IAAAA,GAAG,IAAI,CAAC9C,QAAQ,CAACY,OAAT,KAAqB,CAArB,GAAyB,KAAzB,GAAiC,KAAlC,IAA2CZ,QAAQ,CAACgD,GAAT,GAAelD,QAAf,EAAlD;AACH;;AAED,MAAIgD,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiB,CAAjB,MAAwB,KAA5B,EAAmC;AAC/B,WAAO,MAAMH,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiBH,GAAG,CAACrB,MAArB,CAAb;AACH,GAFD,MAEO,IAAIqB,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiB,CAAjB,MAAwB,KAA5B,EAAmC;AACtC,WAAOH,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiBH,GAAG,CAACrB,MAArB,CAAP;AACH,GAFM,MAEA;AACH,WAAO,GAAP;AACH;AACJ,CAtBD;;AAwBApC,UAAU,CAACU,SAAX,CAAqBmD,KAArB,GAA6B,UAASC,IAAT,EAAe;AACxC,MAAIL,GAAG,GAAG,EAAV;;AAEA,OAAK,IAAItB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK5B,KAAL,CAAW6B,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,QAAIuB,IAAI,GAAG,KAAKnD,KAAL,CAAW4B,CAAX,CAAX;AAEAsB,IAAAA,GAAG,IAAI,CAACC,IAAI,CAACZ,YAAL,CAAkB,CAAlB,EAAqBvB,OAArB,KAAiC,CAAjC,GAAqC,KAArC,GAA6C,KAA9C,IAAuDmC,IAAI,CAACG,KAAL,CAAWC,IAAX,CAA9D;AACH;;AAED,OAAK,IAAI3B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKjC,SAAL,CAAekC,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC5C,QAAIxB,QAAQ,GAAG,KAAKT,SAAL,CAAeiC,CAAf,CAAf;AAEAsB,IAAAA,GAAG,IAAI,CAAC9C,QAAQ,CAACY,OAAT,KAAqB,CAArB,GAAyB,KAAzB,GAAiC,KAAlC,IAA2CZ,QAAQ,CAACgD,GAAT,GAAeE,KAAf,EAAlD;AACH;;AAED,MAAIJ,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiB,CAAjB,MAAwB,KAA5B,EAAmC;AAC/B,WAAO,MAAMH,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiBH,GAAG,CAACrB,MAArB,CAAb;AACH,GAFD,MAEO,IAAIqB,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiB,CAAjB,MAAwB,KAA5B,EAAmC;AACtC,WAAOH,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiBH,GAAG,CAACrB,MAArB,CAAP;AACH,GAFM,MAEA;AACH,WAAO,GAAP;AACH;AACJ,CAtBD;;AAwBApC,UAAU,CAACU,SAAX,CAAqBY,+BAArB,GAAuD,YAAW;AAC9D,OAAKf,KAAL,GAAa,KAAKA,KAAL,CAAWwD,MAAX,CAAkB,UAAS1D,CAAT,EAAW;AAAC,WAAOA,CAAC,CAAC2D,WAAF,GAAgBpD,MAAhB,GAAyBqD,KAAzB,KAAmC,CAA1C;AAA6C,GAA3E,CAAb;AACA,SAAO,IAAP;AACH,CAHD;;AAKAjE,UAAU,CAACU,SAAX,CAAqBU,iBAArB,GAAyC,YAAW;AAChD,WAAS8C,kBAAT,CAA4BR,IAA5B,EAAkCS,WAAlC,EAA+C;AAC3C,SAAK,IAAIhC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgC,WAAW,CAAC/B,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,UAAIuB,IAAI,CAACU,iBAAL,CAAuBD,WAAW,CAAChC,CAAD,CAAlC,CAAJ,EAA4C;AACxC,eAAO,IAAP;AACH;AACJ;;AAED,WAAO,KAAP;AACH;;AAED,MAAID,QAAQ,GAAG,EAAf;AACA,MAAIiC,WAAW,GAAG,EAAlB;;AAEA,OAAK,IAAIhC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK5B,KAAL,CAAW6B,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,QAAIE,QAAQ,GAAG,KAAK9B,KAAL,CAAW4B,CAAX,CAAf;;AAEA,QAAI+B,kBAAkB,CAAC7B,QAAD,EAAW8B,WAAX,CAAtB,EAA+C;AAC3C;AACH,KAFD,MAEO;AACH,WAAK,IAAI7B,CAAC,GAAGH,CAAC,GAAG,CAAjB,EAAoBG,CAAC,GAAG,KAAK/B,KAAL,CAAW6B,MAAnC,EAA2CE,CAAC,EAA5C,EAAgD;AAC5C,YAAIC,QAAQ,GAAG,KAAKhC,KAAL,CAAW+B,CAAX,CAAf;;AAEA,YAAID,QAAQ,CAAC+B,iBAAT,CAA2B7B,QAA3B,CAAJ,EAA0C;AACtCF,UAAAA,QAAQ,GAAGA,QAAQ,CAACtB,GAAT,CAAawB,QAAb,CAAX;AACH;AACJ;;AAEDL,MAAAA,QAAQ,CAACM,IAAT,CAAcH,QAAd;AACA8B,MAAAA,WAAW,CAAC3B,IAAZ,CAAiBH,QAAjB;AACH;AAEJ;;AAED,OAAK9B,KAAL,GAAa2B,QAAb;AACA,SAAO,IAAP;AACH,CApCD;;AAsCAlC,UAAU,CAACU,SAAX,CAAqBW,mCAArB,GAA2D,YAAW;AAClE,MAAIM,SAAS,GAAG,EAAhB;AACA,MAAIhB,QAAQ,GAAG,IAAIf,QAAJ,CAAa,CAAb,EAAgB,CAAhB,CAAf;;AAEA,OAAK,IAAIuC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK5B,KAAL,CAAW6B,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,QAAIE,QAAQ,GAAG,KAAK9B,KAAL,CAAW4B,CAAX,CAAf;;AAEA,QAAIE,QAAQ,CAACgC,SAAT,CAAmBjC,MAAnB,KAA8B,CAAlC,EAAqC;AACjCzB,MAAAA,QAAQ,GAAGA,QAAQ,CAACI,GAAT,CAAasB,QAAQ,CAAC2B,WAAT,EAAb,CAAX;AACH,KAFD,MAEO;AACHrC,MAAAA,SAAS,CAACa,IAAV,CAAeH,QAAf;AACH;AACJ;;AAED,OAAKnC,SAAL,CAAesC,IAAf,CAAoB7B,QAApB;AACA,OAAKJ,KAAL,GAAaoB,SAAb;AACA,SAAO,IAAP;AACH,CAjBD;;AAmBA3B,UAAU,CAACU,SAAX,CAAqBS,KAArB,GAA6B,YAAW;AACpC,WAASmD,SAAT,CAAmB9C,CAAnB,EAAsB+C,CAAtB,EAAyB;AACrB,QAAIC,CAAC,GAAGhD,CAAC,CAACiD,SAAF,EAAR;AACA,QAAIC,CAAC,GAAGH,CAAC,CAACE,SAAF,EAAR;;AAEA,QAAID,CAAC,KAAKE,CAAV,EAAa;AACT,UAAIC,CAAC,GAAGnD,CAAC,CAAC6C,SAAF,CAAYjC,MAApB;AACA,UAAIwC,CAAC,GAAGL,CAAC,CAACF,SAAF,CAAYjC,MAApB;AAEA,aAAOwC,CAAC,GAAGD,CAAX;AACH,KALD,MAKO;AACH,aAAOD,CAAC,GAAGF,CAAX;AACH;AACJ;;AAED,OAAKjE,KAAL,GAAa,KAAKA,KAAL,CAAWsE,IAAX,CAAgBP,SAAhB,CAAb;AACA,SAAO,IAAP;AACH,CAjBD;;AAmBAtE,UAAU,CAACU,SAAX,CAAqBoE,YAArB,GAAoC,UAAS7E,QAAT,EAAmB;AACnD,OAAK,IAAIkC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK5B,KAAL,CAAW6B,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,QAAI,KAAK5B,KAAL,CAAW4B,CAAX,EAAc4C,WAAd,CAA0B9E,QAA1B,CAAJ,EAAyC;AACrC,aAAO,IAAP;AACH;AACJ;;AAED,SAAO,KAAP;AACH,CARD;;AAUAD,UAAU,CAACU,SAAX,CAAqBsE,gBAArB,GAAwC,UAAS/E,QAAT,EAAmB;AACvD,OAAK,IAAIkC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK5B,KAAL,CAAW6B,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,QAAI,CAAC,KAAK5B,KAAL,CAAW4B,CAAX,EAAc8C,eAAd,CAA8BhF,QAA9B,CAAL,EAA8C;AAC1C,aAAO,KAAP;AACH;AACJ;;AAED,SAAO,IAAP;AACH,CARD;;AAUAD,UAAU,CAACU,SAAX,CAAqBwE,4BAArB,GAAoD,UAASjF,QAAT,EAAmB;AACnE,OAAK,IAAIkC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK5B,KAAL,CAAW6B,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,QAAIuB,IAAI,GAAG,KAAKnD,KAAL,CAAW4B,CAAX,CAAX;;AACA,QAAIuB,IAAI,CAACqB,WAAL,CAAiB9E,QAAjB,KAA+B,CAACyD,IAAI,CAACuB,eAAL,CAAqBhF,QAArB,CAApC,EAAoE;AAChE,aAAO,KAAP;AACH;AACJ;;AAED,SAAO,IAAP;AACH,CATD;;AAWAD,UAAU,CAACU,SAAX,CAAqByE,gBAArB,GAAwC,YAAW;AAC/C,OAAK,IAAIhD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK5B,KAAL,CAAW6B,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,QAAIuB,IAAI,GAAG,KAAKnD,KAAL,CAAW4B,CAAX,CAAX;;AACA,QAAIuB,IAAI,CAACW,SAAL,CAAejC,MAAf,GAAwB,CAA5B,EAA+B;AAC3B,aAAO,KAAP;AACH;AACJ;;AAED,SAAO,IAAP;AACH,CATD;;AAWApC,UAAU,CAACU,SAAX,CAAqB0E,UAArB,GAAkC,YAAW;AACzC,SAAO,KAAK7E,KAAL,CAAWK,MAAX,CAAkB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAAC,WAAOuE,IAAI,CAACC,GAAL,CAASzE,CAAT,EAAWC,CAAC,CAAC2D,SAAF,EAAX,CAAP;AAAkC,GAAlE,EAAmE,CAAnE,CAAP;AACH,CAFD;;AAIAzE,UAAU,CAACU,SAAX,CAAqB6E,oBAArB,GAA4C,UAAStF,QAAT,EAAmB;AAC3D,SAAO,KAAKM,KAAL,CAAWK,MAAX,CAAkB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAAC,WAAOuE,IAAI,CAACC,GAAL,CAASzE,CAAT,EAAWC,CAAC,CAAC0E,mBAAF,CAAsBvF,QAAtB,CAAX,CAAP;AAAoD,GAApF,EAAqF,CAArF,CAAP;AACH,CAFD;;AAIAD,UAAU,CAACU,SAAX,CAAqB+E,sBAArB,GAA8C,YAAW;AACrD;AACA,MAAIjE,CAAJ;AACA,MAAI+C,CAAC,GAAG,IAAI3E,QAAJ,CAAa,CAAb,EAAgB,CAAhB,CAAR;;AACA,OAAK,IAAIuC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK5B,KAAL,CAAW6B,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,QAAIE,QAAQ,GAAG,KAAK9B,KAAL,CAAW4B,CAAX,CAAf;AACAX,IAAAA,CAAC,GAAIa,QAAQ,CAACoC,SAAT,OAAyB,CAA1B,GAA+BpC,QAAQ,CAAC2B,WAAT,GAAuB/C,IAAvB,EAA/B,GAA+DO,CAAnE;AACA+C,IAAAA,CAAC,GAAIlC,QAAQ,CAACoC,SAAT,OAAyB,CAA1B,GAA+BpC,QAAQ,CAAC2B,WAAT,GAAuB/C,IAAvB,EAA/B,GAA+DsD,CAAnE;AACH;;AACD,MAAIzD,CAAC,GAAG,KAAKH,QAAL,EAAR;AAEA,SAAO;AAACa,IAAAA,CAAC,EAACA,CAAH;AAAM+C,IAAAA,CAAC,EAACA,CAAR;AAAWzD,IAAAA,CAAC,EAACA;AAAb,GAAP;AACH,CAZD;;AAcAd,UAAU,CAACU,SAAX,CAAqBgF,kBAArB,GAA0C,YAAW;AACjD;AACA,MAAIlE,CAAJ;AACA,MAAI+C,CAAC,GAAG,IAAI3E,QAAJ,CAAa,CAAb,EAAgB,CAAhB,CAAR;AACA,MAAIkB,CAAC,GAAG,IAAIlB,QAAJ,CAAa,CAAb,EAAgB,CAAhB,CAAR;;AAEA,OAAK,IAAIuC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK5B,KAAL,CAAW6B,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,QAAIE,QAAQ,GAAG,KAAK9B,KAAL,CAAW4B,CAAX,CAAf;AACAX,IAAAA,CAAC,GAAIa,QAAQ,CAACoC,SAAT,OAAyB,CAA1B,GAA+BpC,QAAQ,CAAC2B,WAAT,GAAuB/C,IAAvB,EAA/B,GAA+DO,CAAnE;AACA+C,IAAAA,CAAC,GAAIlC,QAAQ,CAACoC,SAAT,OAAyB,CAA1B,GAA+BpC,QAAQ,CAAC2B,WAAT,GAAuB/C,IAAvB,EAA/B,GAA+DsD,CAAnE;AACAzD,IAAAA,CAAC,GAAIuB,QAAQ,CAACoC,SAAT,OAAyB,CAA1B,GAA+BpC,QAAQ,CAAC2B,WAAT,GAAuB/C,IAAvB,EAA/B,GAA+DH,CAAnE;AACH;;AAED,MAAI6E,CAAC,GAAG,KAAKhF,QAAL,EAAR;AACA,SAAO;AAACa,IAAAA,CAAC,EAACA,CAAH;AAAM+C,IAAAA,CAAC,EAACA,CAAR;AAAWzD,IAAAA,CAAC,EAACA,CAAb;AAAgB6E,IAAAA,CAAC,EAACA;AAAlB,GAAP;AACH,CAfD;;AAiBArF,IAAI,GAAG,UAASL,QAAT,EAAmB;AACtB,MAAIA,QAAQ,YAAYG,QAAxB,EAAkC;AAC9B,SAAKiE,SAAL,GAAiB,CAACpE,QAAQ,CAACgB,IAAT,EAAD,CAAjB;AACH,GAFD,MAEO,IAAI,OAAOhB,QAAP,KAAqB,WAAzB,EAAsC;AACzC,SAAKoE,SAAL,GAAiB,EAAjB;AACH,GAFM,MAEA;AACH,UAAM,IAAI7D,SAAJ,CAAc,uBAAuBP,QAAQ,CAACQ,QAAT,EAAvB,GAA6C,+CAA3D,CAAN;AACH;;AAED,OAAKqC,YAAL,GAAoB,CAAC,IAAIlD,QAAJ,CAAa,CAAb,EAAgB,CAAhB,CAAD,CAApB;AACH,CAVD;;AAYAU,IAAI,CAACI,SAAL,CAAesD,WAAf,GAA6B,YAAW;AACpC;AACA,SAAO,KAAKlB,YAAL,CAAkBlC,MAAlB,CAAyB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAAC,WAAOD,CAAC,CAACmB,QAAF,CAAWlB,CAAX,CAAP;AAAsB,GAA7D,EAA+D,IAAIlB,QAAJ,CAAa,CAAb,EAAe,CAAf,CAA/D,CAAP;AACH,CAHD;;AAKAU,IAAI,CAACI,SAAL,CAAeM,QAAf,GAA0B,YAAW;AACjC,MAAIC,IAAI,GAAG,KAAKA,IAAL,EAAX;AACAA,EAAAA,IAAI,CAAC6B,YAAL,GAAoB,CAAC,KAAKkB,WAAL,EAAD,CAApB;AACA/C,EAAAA,IAAI,CAAC2E,WAAL;AACA,SAAO3E,IAAI,CAAC4D,IAAL,EAAP;AACH,CALD;;AAOAvE,IAAI,CAACI,SAAL,CAAekF,WAAf,GAA6B,YAAW;AACpC,MAAIC,UAAU,GAAG,EAAjB;;AAEA,OAAK,IAAI1D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKkC,SAAL,CAAejC,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC5C,QAAI2D,OAAO,GAAG,KAAKzB,SAAL,CAAelC,CAAf,CAAd;;AAEA,QAAI2D,OAAO,CAAC7F,QAAR,IAAoB4F,UAAxB,EAAoC;AAChCA,MAAAA,UAAU,CAACC,OAAO,CAAC7F,QAAT,CAAV,IAAgC6F,OAAO,CAACC,MAAxC;AACH,KAFD,MAEO;AACHF,MAAAA,UAAU,CAACC,OAAO,CAAC7F,QAAT,CAAV,GAA+B6F,OAAO,CAACC,MAAvC;AACH;AACJ;;AAED,MAAIC,OAAO,GAAG,EAAd;;AAEA,OAAK,IAAI7F,CAAT,IAAc0F,UAAd,EAA0B;AACtB,QAAII,MAAM,GAAG,IAAI7F,QAAJ,CAAaD,CAAb,CAAb;AACA8F,IAAAA,MAAM,CAACF,MAAP,GAAgBF,UAAU,CAAC1F,CAAD,CAA1B;AACA6F,IAAAA,OAAO,CAACxD,IAAR,CAAayD,MAAb;AACH;;AAED,OAAK5B,SAAL,GAAiB2B,OAAjB;AACA,SAAO,IAAP;AACH,CAvBD;;AAyBA1F,IAAI,CAACI,SAAL,CAAeO,IAAf,GAAsB,YAAW;AAC7B,MAAIA,IAAI,GAAG,IAAIX,IAAJ,EAAX;AACAW,EAAAA,IAAI,CAAC6B,YAAL,GAAoB,KAAKA,YAAL,CAAkB5B,GAAlB,CAAsB,UAASJ,CAAT,EAAW;AAAC,WAAOA,CAAC,CAACG,IAAF,EAAP;AAAiB,GAAnD,CAApB;AACAA,EAAAA,IAAI,CAACoD,SAAL,GAAiB,KAAKA,SAAL,CAAenD,GAAf,CAAmB,UAASf,CAAT,EAAW;AAAC,WAAOA,CAAC,CAACc,IAAF,EAAP;AAAiB,GAAhD,CAAjB;AACA,SAAOA,IAAP;AACH,CALD;;AAOAX,IAAI,CAACI,SAAL,CAAeK,GAAf,GAAqB,UAAS2C,IAAT,EAAe;AAChC,MAAGA,IAAI,YAAYpD,IAAhB,IAAwB,KAAK8D,iBAAL,CAAuBV,IAAvB,CAA3B,EAAyD;AACrD,QAAIzC,IAAI,GAAG,KAAKA,IAAL,EAAX;AACAA,IAAAA,IAAI,CAAC6B,YAAL,GAAoB,CAAC7B,IAAI,CAAC+C,WAAL,GAAmBjD,GAAnB,CAAuB2C,IAAI,CAACM,WAAL,EAAvB,CAAD,CAApB;AACA,WAAO/C,IAAP;AACH,GAJD,MAIO;AACH,UAAM,IAAIT,SAAJ,CAAc,uBAAuBkD,IAAI,CAACjD,QAAL,EAAvB,GAAyC,2EAAvD,CAAN;AACH;AACJ,CARD;;AAUAH,IAAI,CAACI,SAAL,CAAeoB,QAAf,GAA0B,UAAS4B,IAAT,EAAe;AACrC,MAAIA,IAAI,YAAYpD,IAAhB,IAAwB,KAAK8D,iBAAL,CAAuBV,IAAvB,CAA5B,EAA0D;AACtD,QAAIzC,IAAI,GAAG,KAAKA,IAAL,EAAX;AACAA,IAAAA,IAAI,CAAC6B,YAAL,GAAoB,CAAC7B,IAAI,CAAC+C,WAAL,GAAmBlC,QAAnB,CAA4B4B,IAAI,CAACM,WAAL,EAA5B,CAAD,CAApB;AACA,WAAO/C,IAAP;AACH,GAJD,MAIO;AACH,UAAM,IAAIT,SAAJ,CAAc,uBAAuBkD,IAAI,CAACjD,QAAL,EAAvB,GAAyC,8EAAvD,CAAN;AACH;AACJ,CARD;;AAUAH,IAAI,CAACI,SAAL,CAAesB,QAAf,GAA0B,UAASR,CAAT,EAAYR,QAAZ,EAAsB;AAC5C,MAAIqB,QAAQ,GAAG,KAAKpB,IAAL,EAAf;;AAEA,MAAIO,CAAC,YAAYlB,IAAjB,EAAuB;AACnB+B,IAAAA,QAAQ,CAACgC,SAAT,GAAqBhC,QAAQ,CAACgC,SAAT,CAAmBzC,MAAnB,CAA0BJ,CAAC,CAAC6C,SAA5B,CAArB;AACAhC,IAAAA,QAAQ,CAACS,YAAT,GAAwBtB,CAAC,CAACsB,YAAF,CAAelB,MAAf,CAAsBS,QAAQ,CAACS,YAA/B,CAAxB;AAEH,GAJD,MAIO,IAAIhD,KAAK,CAAC0B,CAAD,CAAL,IAAYA,CAAC,YAAY5B,QAA7B,EAAuC;AAC1C,QAAIsG,OAAO,GAAIpG,KAAK,CAAC0B,CAAD,CAAL,GAAW,IAAI5B,QAAJ,CAAa4B,CAAb,EAAgB,CAAhB,CAAX,GAAgCA,CAA/C;;AAEA,QAAIa,QAAQ,CAACgC,SAAT,CAAmBjC,MAAnB,KAA8B,CAAlC,EAAqC;AACjCC,MAAAA,QAAQ,CAACS,YAAT,CAAsBN,IAAtB,CAA2B0D,OAA3B;AACH,KAFD,MAEO;AACH7D,MAAAA,QAAQ,CAACS,YAAT,CAAsBqD,OAAtB,CAA8BD,OAA9B;AACH;AACJ,GARM,MAQA;AACH,UAAM,IAAI1F,SAAJ,CAAc,uBAAuBgB,CAAC,CAACf,QAAF,EAAvB,GAAsC,gFAApD,CAAN;AACH;;AAED,SAAQO,QAAQ,IAAIA,QAAQ,KAAKa,SAA1B,GAAuCQ,QAAQ,CAACrB,QAAT,EAAvC,GAA6DqB,QAApE;AACH,CApBD;;AAsBA/B,IAAI,CAACI,SAAL,CAAekC,MAAf,GAAwB,UAASpB,CAAT,EAAYR,QAAZ,EAAsB;AAC1C,MAAGlB,KAAK,CAAC0B,CAAD,CAAL,IAAYA,CAAC,YAAY5B,QAA5B,EAAsC;AAClC,QAAIyC,QAAQ,GAAG,KAAKpB,IAAL,EAAf;AACAoB,IAAAA,QAAQ,CAACS,YAAT,GAAwBT,QAAQ,CAACS,YAAT,CAAsB5B,GAAtB,CAA0B,UAASJ,CAAT,EAAW;AAAC,aAAOA,CAAC,CAAC8B,MAAF,CAASpB,CAAT,EAAWR,QAAX,CAAP;AAA6B,KAAnE,CAAxB;AACA,WAAOqB,QAAP;AACH,GAJD,MAIO;AACH,UAAM,IAAI7B,SAAJ,CAAc,uBAAuBgB,CAAC,CAACf,QAAF,EAAvB,GAAsC,kDAApD,CAAN;AACH;AACJ,CARD;;AAUAH,IAAI,CAACI,SAAL,CAAesC,IAAf,GAAsB,UAASC,MAAT,EAAiBjC,QAAjB,EAA2B;AAC7C,MAAIC,IAAI,GAAG,KAAKA,IAAL,EAAX;AACA,MAAImF,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYnD,MAAZ,CAAX;AACA,MAAIvB,GAAG,GAAGT,IAAI,CAAC6B,YAAL,CAAkBlC,MAAlB,CAAyB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAAC,WAAOD,CAAC,CAACmB,QAAF,CAAWlB,CAAX,EAAaE,QAAb,CAAP;AAA+B,GAAtE,EAAwE,IAAIhB,UAAJ,CAAe,CAAf,CAAxE,CAAV;;AAEA,OAAI,IAAImC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGlB,IAAI,CAACoD,SAAL,CAAejC,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3C,QAAI2D,OAAO,GAAG7E,IAAI,CAACoD,SAAL,CAAelC,CAAf,CAAd;AAEA,QAAImE,EAAJ;;AAEA,QAAIR,OAAO,CAAC7F,QAAR,IAAoBgD,MAAxB,EAAgC;AAC5B,UAAIO,GAAG,GAAGP,MAAM,CAAC6C,OAAO,CAAC7F,QAAT,CAAhB;;AAEA,UAAGuD,GAAG,YAAY5D,QAAf,IAA2B4D,GAAG,YAAYxD,UAA7C,EAAyD;AACrDsG,QAAAA,EAAE,GAAG9C,GAAG,CAACT,GAAJ,CAAQ+C,OAAO,CAACC,MAAhB,CAAL;AACH,OAFD,MAEO,IAAGjG,KAAK,CAAC0D,GAAD,CAAR,EAAe;AAClB8C,QAAAA,EAAE,GAAGjB,IAAI,CAACtC,GAAL,CAASS,GAAT,EAAcsC,OAAO,CAACC,MAAtB,CAAL;AACH,OAFM,MAEA;AACH,cAAM,IAAIvF,SAAJ,CAAc,uBAAuBgD,GAAvB,GAA6B,gDAA3C,CAAN;AACH;AACJ,KAVD,MAUO;AACH8C,MAAAA,EAAE,GAAG,IAAItG,UAAJ,CAAe8F,OAAO,CAAC7F,QAAvB,EAAiC8C,GAAjC,CAAqC+C,OAAO,CAACC,MAA7C,CAAL;AACH;;AAEDrE,IAAAA,GAAG,GAAGA,GAAG,CAACM,QAAJ,CAAasE,EAAb,EAAiBtF,QAAjB,CAAN;AACH;;AAED,SAAOU,GAAP;AACH,CA5BD;;AA8BApB,IAAI,CAACI,SAAL,CAAeqE,WAAf,GAA6B,UAAS9E,QAAT,EAAmB;AAC5C,OAAK,IAAIkC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKkC,SAAL,CAAejC,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC5C,QAAI,KAAKkC,SAAL,CAAelC,CAAf,EAAkBlC,QAAlB,KAA+BA,QAAnC,EAA6C;AACzC,aAAO,IAAP;AACH;AACJ;;AAED,SAAO,KAAP;AACH,CARD;;AAUAK,IAAI,CAACI,SAAL,CAAe+D,SAAf,GAA2B,YAAW;AAClC,SAAO,KAAKJ,SAAL,CAAezD,MAAf,CAAsB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAAC,WAAOuE,IAAI,CAACC,GAAL,CAASzE,CAAT,EAAWC,CAAC,CAACiF,MAAb,CAAP;AAA6B,GAAjE,EAAkE,CAAlE,CAAP;AACH,CAFD;;AAIAzF,IAAI,CAACI,SAAL,CAAe8E,mBAAf,GAAqC,UAASvF,QAAT,EAAmB;AACpD,SAAO,KAAKoE,SAAL,CAAezD,MAAf,CAAsB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAAC,WAAQA,CAAC,CAACb,QAAF,KAAeA,QAAhB,GAA4BoF,IAAI,CAACC,GAAL,CAASzE,CAAT,EAAWC,CAAC,CAACiF,MAAb,CAA5B,GAAmDlF,CAA1D;AAA6D,GAAjG,EAAkG,CAAlG,CAAP;AACH,CAFD;;AAIAP,IAAI,CAACI,SAAL,CAAe0D,iBAAf,GAAmC,UAASV,IAAT,EAAe;AAC9C,MAAI6C,QAAQ,GAAG,KAAKlC,SAApB;AACA,MAAImC,QAAQ,GAAG9C,IAAI,CAACW,SAApB;;AAEA,MAAGkC,QAAQ,CAACnE,MAAT,IAAmBoE,QAAQ,CAACpE,MAA/B,EAAuC;AACnC,WAAO,KAAP;AACH;;AAED,MAAIqE,OAAO,GAAG,CAAd;;AAEA,OAAI,IAAItE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGoE,QAAQ,CAACnE,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,SAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGkE,QAAQ,CAACpE,MAA5B,EAAoCE,CAAC,EAArC,EAAyC;AACrC,UAAGiE,QAAQ,CAACpE,CAAD,CAAR,CAAYlC,QAAZ,KAAyBuG,QAAQ,CAAClE,CAAD,CAAR,CAAYrC,QAArC,IAAiDsG,QAAQ,CAACpE,CAAD,CAAR,CAAY4D,MAAZ,KAAuBS,QAAQ,CAAClE,CAAD,CAAR,CAAYyD,MAAvF,EAA+F;AAC3FU,QAAAA,OAAO,IAAI,CAAX;AACH;AACJ;AACJ;;AAED,SAAQA,OAAO,KAAKF,QAAQ,CAACnE,MAA7B;AACH,CAnBD;;AAqBA9B,IAAI,CAACI,SAAL,CAAeuE,eAAf,GAAiC,UAAShF,QAAT,EAAmB;AAChD,OAAK,IAAIkC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKkC,SAAL,CAAejC,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC5C,QAAI,KAAKkC,SAAL,CAAelC,CAAf,EAAkBlC,QAAlB,IAA8BA,QAAlC,EAA4C;AACxC,aAAO,KAAP;AACH;AACJ;;AAED,SAAO,IAAP;AACH,CARD;;AAUAK,IAAI,CAACI,SAAL,CAAemE,IAAf,GAAsB,YAAW;AAC7B,WAAS6B,QAAT,CAAkBlF,CAAlB,EAAqB+C,CAArB,EAAwB;AACpB,WAAOA,CAAC,CAACwB,MAAF,GAAWvE,CAAC,CAACuE,MAApB;AACH;;AAED,OAAK1B,SAAL,GAAiB,KAAKA,SAAL,CAAeQ,IAAf,CAAoB6B,QAApB,CAAjB;AACA,SAAO,IAAP;AACH,CAPD;;AASApG,IAAI,CAACI,SAAL,CAAeD,QAAf,GAA0B,YAAW;AACjC,MAAIgD,GAAG,GAAG,EAAV;;AAEA,OAAK,IAAItB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKW,YAAL,CAAkBV,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AAC/C,QAAIwE,IAAI,GAAG,KAAK7D,YAAL,CAAkBX,CAAlB,CAAX;;AAEA,QAAIwE,IAAI,CAAChD,GAAL,GAAWM,KAAX,KAAqB,CAArB,IAA0B0C,IAAI,CAAChD,GAAL,GAAWiD,KAAX,KAAqB,CAAnD,EAAsD;AAClDnD,MAAAA,GAAG,IAAI,QAAQkD,IAAI,CAAClG,QAAL,EAAf;AACH;AACJ;;AAEDgD,EAAAA,GAAG,GAAG,KAAKY,SAAL,CAAezD,MAAf,CAAsB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAAC,WAAOD,CAAC,CAACe,MAAF,CAASd,CAAC,CAACL,QAAF,EAAT,CAAP;AAA+B,GAAnE,EAAoEgD,GAApE,CAAN;AACAA,EAAAA,GAAG,GAAIA,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiB,CAAjB,MAAwB,KAAxB,GAAgCH,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiBH,GAAG,CAACrB,MAArB,CAAhC,GAA+DqB,GAAtE;AACAA,EAAAA,GAAG,GAAIA,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiB,CAAjB,MAAwB,GAAxB,GAA8BH,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiBH,GAAG,CAACrB,MAArB,CAA9B,GAA6DqB,GAApE;AAEA,SAAOA,GAAP;AACH,CAhBD;;AAkBAnD,IAAI,CAACI,SAAL,CAAemD,KAAf,GAAuB,UAASC,IAAT,EAAe;AAClC,MAAIA,IAAI,GAAIA,IAAI,KAAKjC,SAAV,GAAuB,EAAvB,GAA4BiC,IAAvC;AACAA,EAAAA,IAAI,CAAC+C,cAAL,GAAsB,EAAE,oBAAoB/C,IAAtB,IAA8B,MAA9B,GAAuCA,IAAI,CAAC+C,cAAlE;AAEA,MAAIC,EAAE,GAAI,QAAQhD,IAAI,CAAC+C,cAAb,GAA8B,GAAxC;AAEA,MAAIpD,GAAG,GAAG,EAAV;;AAEA,OAAK,IAAItB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKW,YAAL,CAAkBV,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AAC/C,QAAIwE,IAAI,GAAG,KAAK7D,YAAL,CAAkBX,CAAlB,CAAX;;AAEA,QAAIwE,IAAI,CAAChD,GAAL,GAAWM,KAAX,KAAqB,CAArB,IAA0B0C,IAAI,CAAChD,GAAL,GAAWiD,KAAX,KAAqB,CAAnD,EAAsD;AAClDnD,MAAAA,GAAG,IAAIqD,EAAE,GAAGH,IAAI,CAAC9C,KAAL,EAAZ;AACH;AACJ;;AACDJ,EAAAA,GAAG,GAAG,KAAKY,SAAL,CAAezD,MAAf,CAAsB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAAC,WAAOD,CAAC,CAACe,MAAF,CAASd,CAAC,CAAC+C,KAAF,EAAT,CAAP;AAA4B,GAAhE,EAAiEJ,GAAjE,CAAN;AACAA,EAAAA,GAAG,GAAIA,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiBkD,EAAE,CAAC1E,MAApB,MAAgC0E,EAAhC,GAAqCrD,GAAG,CAACG,SAAJ,CAAckD,EAAE,CAAC1E,MAAjB,EAAyBqB,GAAG,CAACrB,MAA7B,CAArC,GAA4EqB,GAAnF;AACAA,EAAAA,GAAG,GAAIA,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiB,CAAjB,MAAwB,GAAxB,GAA8BH,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiBH,GAAG,CAACrB,MAArB,CAA9B,GAA6DqB,GAApE;AACAA,EAAAA,GAAG,GAAIA,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiB,CAAjB,MAAwB,UAAxB,GAAqC,YAAYH,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiBH,GAAG,CAACrB,MAArB,CAAjD,GAAgFqB,GAAvF;AAEA,SAAOA,GAAP;AACH,CArBD;;AAuBA,IAAIrD,QAAQ,GAAG,UAASH,QAAT,EAAmB;AAC9B,MAAI,OAAOA,QAAP,KAAqB,QAAzB,EAAmC;AAC/B,SAAKA,QAAL,GAAgBA,QAAhB;AACA,SAAK8F,MAAL,GAAc,CAAd;AACH,GAHD,MAGO;AACH,UAAM,IAAIvF,SAAJ,CAAc,uBAAuBP,QAAQ,CAACQ,QAAT,EAAvB,GAA6C,gDAA3D,CAAN;AACH;AACJ,CAPD;;AASAL,QAAQ,CAACM,SAAT,CAAmBO,IAAnB,GAA0B,YAAW;AACjC,MAAIA,IAAI,GAAG,IAAIb,QAAJ,CAAa,KAAKH,QAAlB,CAAX;AACAgB,EAAAA,IAAI,CAAC8E,MAAL,GAAc,KAAKA,MAAnB;AACA,SAAO9E,IAAP;AACH,CAJD;;AAMAb,QAAQ,CAACM,SAAT,CAAmBD,QAAnB,GAA8B,YAAW;AACrC,MAAIsF,MAAM,GAAG,KAAKA,MAAlB;AACA,MAAI9F,QAAQ,GAAG,KAAKA,QAApB;;AAEA,MAAI8F,MAAM,KAAK,CAAf,EAAkB;AACd,WAAO,EAAP;AACH,GAFD,MAEO,IAAIA,MAAM,KAAK,CAAf,EAAkB;AACrB,WAAO9F,QAAP;AACH,GAFM,MAEA;AACH,WAAOA,QAAQ,GAAG,GAAX,GAAiB8F,MAAxB;AACH;AACJ,CAXD;;AAaA3F,QAAQ,CAACM,SAAT,CAAmBmD,KAAnB,GAA2B,YAAW;AAClC,MAAIkC,MAAM,GAAG,KAAKA,MAAlB;AACA,MAAI9F,QAAQ,GAAG,KAAKA,QAApB;;AAEA,MAAIF,aAAa,CAACgH,OAAd,CAAsB9G,QAAtB,IAAkC,CAAC,CAAvC,EAA0C;AACtCA,IAAAA,QAAQ,GAAG,OAAOA,QAAlB;AACH;;AAED,MAAI8F,MAAM,KAAK,CAAf,EAAkB;AACd,WAAO,EAAP;AACH,GAFD,MAEO,IAAIA,MAAM,KAAK,CAAf,EAAkB;AACrB,WAAO9F,QAAP;AACH,GAFM,MAEA;AACH,WAAOA,QAAQ,GAAG,IAAX,GAAkB8F,MAAlB,GAA2B,GAAlC;AACH;AACJ,CAfD;;AAiBAiB,MAAM,CAACC,OAAP,GAAiB;AACbjH,EAAAA,UAAU,EAAEA,UADC;AAEbM,EAAAA,IAAI,EAAEA,IAFO;AAGbF,EAAAA,QAAQ,EAAEA;AAHG,CAAjB","sourcesContent":["var Fraction = require('./fractions');\nvar isInt = require('./helper').isInt;\nvar GREEK_LETTERS = require('./helper').GREEK_LETTERS;\n\nvar Expression = function(variable) {\n    this.constants = [];\n\n    if(typeof(variable) === \"string\") {\n        var v = new Variable(variable);\n        var t = new Term(v);\n        this.terms = [t];\n    } else if(isInt(variable)) {\n        this.constants = [new Fraction(variable, 1)];\n        this.terms = [];\n    } else if(variable instanceof Fraction) {\n        this.constants = [variable];\n        this.terms = [];\n    } else if(variable instanceof Term) {\n        this.terms = [variable];\n    } else if(typeof(variable) === \"undefined\") {\n        this.terms = [];\n    }else{\n        throw new TypeError(\"Invalid Argument (\" + variable.toString() + \"): Argument must be of type String, Integer, Fraction or Term.\");\n    }\n};\n\nExpression.prototype.constant = function() {\n    return this.constants.reduce(function(p,c){return p.add(c);},new Fraction(0, 1));\n};\n\nExpression.prototype.simplify = function() {\n    var copy = this.copy();\n\n    //simplify all terms\n    copy.terms = copy.terms.map(function(t){return t.simplify();});\n\n    copy._sort();\n    copy._combineLikeTerms();\n    copy._moveTermsWithDegreeZeroToConstants();\n    copy._removeTermsWithCoefficientZero();\n    copy.constants = (copy.constant().valueOf() === 0 ? [] : [copy.constant()]);\n\n    return copy;\n};\n\nExpression.prototype.copy = function() {\n    var copy = new Expression();\n    \n    //copy all constants\n    copy.constants = this.constants.map(function(c){return c.copy();});\n    //copy all terms\n    copy.terms = this.terms.map(function(t){return t.copy();});\n\n    return copy;\n};\n\nExpression.prototype.add = function(a, simplify) {\n    var thisExp = this.copy();\n\n    if (typeof(a) === \"string\" || a instanceof Term || isInt(a) || a instanceof Fraction) {\n        var exp = new Expression(a);\n        return thisExp.add(exp, simplify);\n    } else if (a instanceof Expression) {\n        var keepTerms = a.copy().terms;\n\n        thisExp.terms = thisExp.terms.concat(keepTerms);\n        thisExp.constants = thisExp.constants.concat(a.constants);\n        thisExp._sort();\n    } else {\n        throw new TypeError(\"Invalid Argument (\" + a.toString() + \"): Summand must be of type String, Expression, Term, Fraction or Integer.\");\n    }\n\n    return (simplify || simplify === undefined) ? thisExp.simplify() : thisExp;\n};\n\nExpression.prototype.subtract = function(a, simplify) {\n    var negative = (a instanceof Expression) ? a.multiply(-1) : new Expression(a).multiply(-1);\n    return this.add(negative, simplify);\n};\n\nExpression.prototype.multiply = function(a, simplify) {\n    var thisExp = this.copy();\n\n    if (typeof(a) === \"string\" || a instanceof Term || isInt(a) || a instanceof Fraction) {\n        var exp = new Expression(a);\n        return thisExp.multiply(exp, simplify);\n    } else if (a instanceof Expression) {\n        var thatExp = a.copy();\n        var newTerms = [];\n\n        for (var i = 0; i < thisExp.terms.length; i++) {\n            var thisTerm = thisExp.terms[i];\n\n            for (var j = 0; j < thatExp.terms.length; j++) {\n                var thatTerm = thatExp.terms[j];\n                newTerms.push(thisTerm.multiply(thatTerm, simplify));\n            }\n\n            for (var j = 0; j < thatExp.constants.length; j++) {\n                newTerms.push(thisTerm.multiply(thatExp.constants[j], simplify));\n            }\n        }\n\n        for (var i = 0; i < thatExp.terms.length; i++) {\n            var thatTerm = thatExp.terms[i];\n\n            for (var j = 0; j < thisExp.constants.length; j++) {\n                newTerms.push(thatTerm.multiply(thisExp.constants[j], simplify));\n            }\n        }\n\n        var newConstants = [];\n\n        for (var i = 0; i < thisExp.constants.length; i++) {\n            var thisConst = thisExp.constants[i];\n\n            for (var j = 0; j < thatExp.constants.length; j++) {\n                var thatConst = thatExp.constants[j];\n                var t = new Term();\n                t = t.multiply(thatConst, false);\n                t = t.multiply(thisConst, false);\n                newTerms.push(t);\n            }\n        }\n\n        thisExp.constants = newConstants;\n        thisExp.terms = newTerms;\n        thisExp._sort();\n    } else {\n        throw new TypeError(\"Invalid Argument (\" + a.toString() + \"): Multiplicand must be of type String, Expression, Term, Fraction or Integer.\");\n    }\n\n    return (simplify || simplify === undefined) ? thisExp.simplify() : thisExp;\n};\n\nExpression.prototype.divide = function(a, simplify) {\n    if (a instanceof Fraction || isInt(a)) {\n\n        if (a.valueOf() === 0) {\n            throw new EvalError(\"Divide By Zero\");\n        }\n\n        var copy = this.copy();\n\n        for (var i = 0; i < copy.terms.length; i++) {\n            var thisTerm = copy.terms[i];\n\n            for (var j = 0; j < thisTerm.coefficients.length; j++) {\n                thisTerm.coefficients[j] = thisTerm.coefficients[j].divide(a, simplify);\n            }\n        }\n\n        //divide every constant by a\n        copy.constants = copy.constants.map(function(c){return c.divide(a,simplify);});\n\n        return copy;\n    } else {\n        throw new TypeError(\"Invalid Argument (\" + a.toString() + \"): Divisor must be of type Fraction or Integer.\");\n    }\n};\n\nExpression.prototype.pow = function(a, simplify) {\n    if (isInt(a)) {\n        var copy = this.copy();\n\n        if (a === 0) {\n            return new Expression().add(1);\n        } else {\n            for (var i = 1; i < a; i++) {\n                copy = copy.multiply(this, simplify);\n            }\n\n            copy._sort();\n        }\n\n        return (simplify || simplify === undefined) ? copy.simplify() : copy;\n    } else {\n        throw new TypeError(\"Invalid Argument (\" + a.toString() + \"): Exponent must be of type Integer.\");\n    }\n};\n\nExpression.prototype.eval = function(values, simplify) {\n    var exp = new Expression();\n    exp.constants = (simplify ? [this.constant()] : this.constants.slice());\n\n    //add all evaluated terms of this to exp\n    exp = this.terms.reduce(function(p,c){return p.add(c.eval(values,simplify),simplify);},exp);\n\n    return exp;\n};\n\nExpression.prototype.summation = function(variable, lower, upper, simplify) {\n\tvar thisExpr = this.copy();\n\tvar newExpr = new Expression();\n\tfor(var i = lower; i < (upper + 1); i++) {\n\t\tvar sub = {};\n\t\tsub[variable] = i;\n\t\tnewExpr = newExpr.add(thisExpr.eval(sub, simplify), simplify);\n\t}\n\treturn newExpr;\n};\n\nExpression.prototype.toString = function() {\n    var str = \"\";\n\n    for (var i = 0; i < this.terms.length; i++) {\n        var term = this.terms[i];\n\n        str += (term.coefficients[0].valueOf() < 0 ? \" - \" : \" + \") + term.toString();\n    }\n\n    for (var i = 0; i < this.constants.length; i++) {\n        var constant = this.constants[i];\n\n        str += (constant.valueOf() < 0 ? \" - \" : \" + \") + constant.abs().toString();\n    }\n\n    if (str.substring(0, 3) === \" - \") {\n        return \"-\" + str.substring(3, str.length);\n    } else if (str.substring(0, 3) === \" + \") {\n        return str.substring(3, str.length);\n    } else {\n        return \"0\";\n    }\n};\n\nExpression.prototype.toTex = function(dict) {\n    var str = \"\";\n\n    for (var i = 0; i < this.terms.length; i++) {\n        var term = this.terms[i];\n\n        str += (term.coefficients[0].valueOf() < 0 ? \" - \" : \" + \") + term.toTex(dict);\n    }\n\n    for (var i = 0; i < this.constants.length; i++) {\n        var constant = this.constants[i];\n\n        str += (constant.valueOf() < 0 ? \" - \" : \" + \") + constant.abs().toTex();\n    }\n\n    if (str.substring(0, 3) === \" - \") {\n        return \"-\" + str.substring(3, str.length);\n    } else if (str.substring(0, 3) === \" + \") {\n        return str.substring(3, str.length);\n    } else {\n        return \"0\";\n    }\n};\n\nExpression.prototype._removeTermsWithCoefficientZero = function() {\n    this.terms = this.terms.filter(function(t){return t.coefficient().reduce().numer !== 0;});\n    return this;\n};\n\nExpression.prototype._combineLikeTerms = function() {\n    function alreadyEncountered(term, encountered) {\n        for (var i = 0; i < encountered.length; i++) {\n            if (term.canBeCombinedWith(encountered[i])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    var newTerms = [];\n    var encountered = [];\n\n    for (var i = 0; i < this.terms.length; i++) {\n        var thisTerm = this.terms[i];\n\n        if (alreadyEncountered(thisTerm, encountered)) {\n            continue;\n        } else {\n            for (var j = i + 1; j < this.terms.length; j++) {\n                var thatTerm = this.terms[j];\n\n                if (thisTerm.canBeCombinedWith(thatTerm)) {\n                    thisTerm = thisTerm.add(thatTerm);\n                }\n            }\n\n            newTerms.push(thisTerm);\n            encountered.push(thisTerm);\n        }\n\n    }\n\n    this.terms = newTerms;\n    return this;\n};\n\nExpression.prototype._moveTermsWithDegreeZeroToConstants = function() {\n    var keepTerms = [];\n    var constant = new Fraction(0, 1);\n\n    for (var i = 0; i < this.terms.length; i++) {\n        var thisTerm = this.terms[i];\n\n        if (thisTerm.variables.length === 0) {\n            constant = constant.add(thisTerm.coefficient());\n        } else {\n            keepTerms.push(thisTerm);\n        }\n    }\n\n    this.constants.push(constant);\n    this.terms = keepTerms;\n    return this;\n};\n\nExpression.prototype._sort = function() {\n    function sortTerms(a, b) {\n        var x = a.maxDegree();\n        var y = b.maxDegree();\n\n        if (x === y) {\n            var m = a.variables.length;\n            var n = b.variables.length;\n\n            return n - m;\n        } else {\n            return y - x;\n        }\n    }\n\n    this.terms = this.terms.sort(sortTerms);\n    return this;\n};\n\nExpression.prototype._hasVariable = function(variable) {\n    for (var i = 0; i < this.terms.length; i++) {\n        if (this.terms[i].hasVariable(variable)) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\nExpression.prototype._onlyHasVariable = function(variable) {\n    for (var i = 0; i < this.terms.length; i++) {\n        if (!this.terms[i].onlyHasVariable(variable)) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\nExpression.prototype._noCrossProductsWithVariable = function(variable) {\n    for (var i = 0; i < this.terms.length; i++) {\n        var term = this.terms[i];\n        if (term.hasVariable(variable)  && !term.onlyHasVariable(variable)) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\nExpression.prototype._noCrossProducts = function() {\n    for (var i = 0; i < this.terms.length; i++) {\n        var term = this.terms[i];\n        if (term.variables.length > 1) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\nExpression.prototype._maxDegree = function() {\n    return this.terms.reduce(function(p,c){return Math.max(p,c.maxDegree());},1);\n};\n\nExpression.prototype._maxDegreeOfVariable = function(variable) {\n    return this.terms.reduce(function(p,c){return Math.max(p,c.maxDegreeOfVariable(variable));},1);\n};\n\nExpression.prototype._quadraticCoefficients = function() {\n    // This function isn't used until everything has been moved to the LHS in Equation.solve.\n    var a;\n    var b = new Fraction(0, 1);\n    for (var i = 0; i < this.terms.length; i++) {\n        var thisTerm = this.terms[i];\n        a = (thisTerm.maxDegree() === 2) ? thisTerm.coefficient().copy() : a;\n        b = (thisTerm.maxDegree() === 1) ? thisTerm.coefficient().copy() : b;\n    }\n    var c = this.constant();\n\n    return {a:a, b:b, c:c};\n};\n\nExpression.prototype._cubicCoefficients = function() {\n    // This function isn't used until everything has been moved to the LHS in Equation.solve.\n    var a;\n    var b = new Fraction(0, 1);\n    var c = new Fraction(0, 1);\n\n    for (var i = 0; i < this.terms.length; i++) {\n        var thisTerm = this.terms[i];\n        a = (thisTerm.maxDegree() === 3) ? thisTerm.coefficient().copy() : a;\n        b = (thisTerm.maxDegree() === 2) ? thisTerm.coefficient().copy() : b;\n        c = (thisTerm.maxDegree() === 1) ? thisTerm.coefficient().copy() : c;\n    }\n\n    var d = this.constant();\n    return {a:a, b:b, c:c, d:d};\n};\n\nTerm = function(variable) {\n    if (variable instanceof Variable) {\n        this.variables = [variable.copy()];\n    } else if (typeof(variable) === \"undefined\") {\n        this.variables = [];\n    } else {\n        throw new TypeError(\"Invalid Argument (\" + variable.toString() + \"): Term initializer must be of type Variable.\");\n    }\n\n    this.coefficients = [new Fraction(1, 1)];\n};\n\nTerm.prototype.coefficient = function() {\n    //calculate the product of all coefficients\n    return this.coefficients.reduce(function(p,c){return p.multiply(c);}, new Fraction(1,1));\n};\n\nTerm.prototype.simplify = function() {\n    var copy = this.copy();\n    copy.coefficients = [this.coefficient()];\n    copy.combineVars();\n    return copy.sort();\n};\n\nTerm.prototype.combineVars = function() {\n    var uniqueVars = {};\n\n    for (var i = 0; i < this.variables.length; i++) {\n        var thisVar = this.variables[i];\n\n        if (thisVar.variable in uniqueVars) {\n            uniqueVars[thisVar.variable] += thisVar.degree;\n        } else {\n            uniqueVars[thisVar.variable] = thisVar.degree;\n        }\n    }\n\n    var newVars = [];\n\n    for (var v in uniqueVars) {\n        var newVar = new Variable(v);\n        newVar.degree = uniqueVars[v];\n        newVars.push(newVar);\n    }\n\n    this.variables = newVars;\n    return this;\n};\n\nTerm.prototype.copy = function() {\n    var copy = new Term();\n    copy.coefficients = this.coefficients.map(function(c){return c.copy();});\n    copy.variables = this.variables.map(function(v){return v.copy();});\n    return copy;\n};\n\nTerm.prototype.add = function(term) {\n    if(term instanceof Term && this.canBeCombinedWith(term)) {\n        var copy = this.copy();\n        copy.coefficients = [copy.coefficient().add(term.coefficient())];\n        return copy;\n    } else {\n        throw new TypeError(\"Invalid Argument (\" + term.toString() + \"): Summand must be of type String, Expression, Term, Fraction or Integer.\");\n    }\n};\n\nTerm.prototype.subtract = function(term) {\n    if (term instanceof Term && this.canBeCombinedWith(term)) {\n        var copy = this.copy();\n        copy.coefficients = [copy.coefficient().subtract(term.coefficient())];\n        return copy;\n    } else {\n        throw new TypeError(\"Invalid Argument (\" + term.toString() + \"): Subtrahend must be of type String, Expression, Term, Fraction or Integer.\");\n    }\n};\n\nTerm.prototype.multiply = function(a, simplify) {\n    var thisTerm = this.copy();\n\n    if (a instanceof Term) {\n        thisTerm.variables = thisTerm.variables.concat(a.variables);\n        thisTerm.coefficients = a.coefficients.concat(thisTerm.coefficients);\n\n    } else if (isInt(a) || a instanceof Fraction) {\n        var newCoef = (isInt(a) ? new Fraction(a, 1) : a);\n\n        if (thisTerm.variables.length === 0) {\n            thisTerm.coefficients.push(newCoef);\n        } else {\n            thisTerm.coefficients.unshift(newCoef);\n        }\n    } else {\n        throw new TypeError(\"Invalid Argument (\" + a.toString() + \"): Multiplicand must be of type String, Expression, Term, Fraction or Integer.\");\n    }\n\n    return (simplify || simplify === undefined) ? thisTerm.simplify() : thisTerm;\n};\n\nTerm.prototype.divide = function(a, simplify) {\n    if(isInt(a) || a instanceof Fraction) {\n        var thisTerm = this.copy();\n        thisTerm.coefficients = thisTerm.coefficients.map(function(c){return c.divide(a,simplify);});\n        return thisTerm;\n    } else {\n        throw new TypeError(\"Invalid Argument (\" + a.toString() + \"): Argument must be of type Fraction or Integer.\");\n    }\n};\n\nTerm.prototype.eval = function(values, simplify) {\n    var copy = this.copy();\n    var keys = Object.keys(values);\n    var exp = copy.coefficients.reduce(function(p,c){return p.multiply(c,simplify);}, new Expression(1));\n\n    for(var i = 0; i < copy.variables.length; i++) {\n        var thisVar = copy.variables[i];\n\n        var ev;\n\n        if (thisVar.variable in values) {\n            var sub = values[thisVar.variable];\n\n            if(sub instanceof Fraction || sub instanceof Expression) {\n                ev = sub.pow(thisVar.degree);\n            } else if(isInt(sub)) {\n                ev = Math.pow(sub, thisVar.degree);\n            } else {\n                throw new TypeError(\"Invalid Argument (\" + sub + \"): Can only evaluate Expressions or Fractions.\");\n            }\n        } else {\n            ev = new Expression(thisVar.variable).pow(thisVar.degree);\n        }\n\n        exp = exp.multiply(ev, simplify);\n    }\n\n    return exp;\n};\n\nTerm.prototype.hasVariable = function(variable) {\n    for (var i = 0; i < this.variables.length; i++) {\n        if (this.variables[i].variable === variable) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\nTerm.prototype.maxDegree = function() {\n    return this.variables.reduce(function(p,c){return Math.max(p,c.degree);},1);\n};\n\nTerm.prototype.maxDegreeOfVariable = function(variable) {\n    return this.variables.reduce(function(p,c){return (c.variable === variable) ? Math.max(p,c.degree) : p;},1);\n};\n\nTerm.prototype.canBeCombinedWith = function(term) {\n    var thisVars = this.variables;\n    var thatVars = term.variables;\n\n    if(thisVars.length != thatVars.length) {\n        return false;\n    }\n\n    var matches = 0;\n\n    for(var i = 0; i < thisVars.length; i++) {\n        for(var j = 0; j < thatVars.length; j++) {\n            if(thisVars[i].variable === thatVars[j].variable && thisVars[i].degree === thatVars[j].degree) {\n                matches += 1;\n            }\n        }\n    }\n\n    return (matches === thisVars.length);\n};\n\nTerm.prototype.onlyHasVariable = function(variable) {\n    for (var i = 0; i < this.variables.length; i++) {\n        if (this.variables[i].variable != variable) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\nTerm.prototype.sort = function() {\n    function sortVars(a, b) {\n        return b.degree - a.degree;\n    }\n\n    this.variables = this.variables.sort(sortVars);\n    return this;\n};\n\nTerm.prototype.toString = function() {\n    var str = \"\";\n\n    for (var i = 0; i < this.coefficients.length; i++) {\n        var coef = this.coefficients[i];\n\n        if (coef.abs().numer !== 1 || coef.abs().denom !== 1) {\n            str += \" * \" + coef.toString();\n        }\n    }\n\n    str = this.variables.reduce(function(p,c){return p.concat(c.toString());},str);\n    str = (str.substring(0, 3) === \" * \" ? str.substring(3, str.length) : str);\n    str = (str.substring(0, 1) === \"-\" ? str.substring(1, str.length) : str);\n\n    return str;\n};\n\nTerm.prototype.toTex = function(dict) {\n    var dict = (dict === undefined) ? {} : dict;\n    dict.multiplication = !(\"multiplication\" in dict) ? \"cdot\" : dict.multiplication;\n    \n    var op =  \" \\\\\" + dict.multiplication + \" \";\n\n    var str = \"\";\n\n    for (var i = 0; i < this.coefficients.length; i++) {\n        var coef = this.coefficients[i];\n\n        if (coef.abs().numer !== 1 || coef.abs().denom !== 1) {\n            str += op + coef.toTex();\n        }\n    }\n    str = this.variables.reduce(function(p,c){return p.concat(c.toTex());},str);\n    str = (str.substring(0, op.length) === op ? str.substring(op.length, str.length) : str);\n    str = (str.substring(0, 1) === \"-\" ? str.substring(1, str.length) : str);\n    str = (str.substring(0, 7) === \"\\\\frac{-\" ? \"\\\\frac{\" + str.substring(7, str.length) : str);\n\n    return str;\n};\n\nvar Variable = function(variable) {\n    if (typeof(variable) === \"string\") {\n        this.variable = variable;\n        this.degree = 1;\n    } else {\n        throw new TypeError(\"Invalid Argument (\" + variable.toString() + \"): Variable initalizer must be of type String.\");\n    }\n};\n\nVariable.prototype.copy = function() {\n    var copy = new Variable(this.variable);\n    copy.degree = this.degree;\n    return copy;\n};\n\nVariable.prototype.toString = function() {\n    var degree = this.degree;\n    var variable = this.variable;\n\n    if (degree === 0) {\n        return \"\";\n    } else if (degree === 1) {\n        return variable;\n    } else {\n        return variable + \"^\" + degree;\n    }\n};\n\nVariable.prototype.toTex = function() {\n    var degree = this.degree;\n    var variable = this.variable;\n\n    if (GREEK_LETTERS.indexOf(variable) > -1) {\n        variable = \"\\\\\" + variable;\n    }\n\n    if (degree === 0) {\n        return \"\";\n    } else if (degree === 1) {\n        return variable;\n    } else {\n        return variable + \"^{\" + degree + \"}\";\n    }\n};\n\nmodule.exports = {\n    Expression: Expression,\n    Term: Term,\n    Variable: Variable\n};"]},"metadata":{},"sourceType":"script"}