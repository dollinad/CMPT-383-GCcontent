{"ast":null,"code":"var Expression = require('./expressions').Expression;\n\nvar Variable = require('./expressions').Variable;\n\nvar Term = require('./expressions').Term;\n\nvar Fraction = require('./fractions');\n\nvar isInt = require('./helper').isInt;\n\nvar Equation = function (lhs, rhs) {\n  if (lhs instanceof Expression) {\n    this.lhs = lhs;\n\n    if (rhs instanceof Expression) {\n      this.rhs = rhs;\n    } else if (rhs instanceof Fraction || isInt(rhs)) {\n      this.rhs = new Expression(rhs);\n    } else {\n      throw new TypeError(\"Invalid Argument (\" + rhs.toString() + \"): Right-hand side must be of type Expression, Fraction or Integer.\");\n    }\n  } else {\n    throw new TypeError(\"Invalid Argument (\" + lhs.toString() + \"): Left-hand side must be of type Expression.\");\n  }\n};\n\nEquation.prototype.solveFor = function (variable) {\n  if (!this.lhs._hasVariable(variable) && !this.rhs._hasVariable(variable)) {\n    throw new TypeError(\"Invalid Argument (\" + variable.toString() + \"): Variable does not exist in the equation.\");\n  } // If the equation is linear and the variable in question can be isolated through arithmetic, solve.\n\n\n  if (this._isLinear() || this._variableCanBeIsolated(variable)) {\n    var solvingFor = new Term(new Variable(variable));\n    var newLhs = new Expression();\n    var newRhs = new Expression();\n\n    for (var i = 0; i < this.rhs.terms.length; i++) {\n      var term = this.rhs.terms[i];\n\n      if (term.canBeCombinedWith(solvingFor)) {\n        newLhs = newLhs.subtract(term);\n      } else {\n        newRhs = newRhs.add(term);\n      }\n    }\n\n    for (var i = 0; i < this.lhs.terms.length; i++) {\n      var term = this.lhs.terms[i];\n\n      if (term.canBeCombinedWith(solvingFor)) {\n        newLhs = newLhs.add(term);\n      } else {\n        newRhs = newRhs.subtract(term);\n      }\n    }\n\n    newRhs = newRhs.subtract(this.lhs.constant());\n    newRhs = newRhs.add(this.rhs.constant());\n\n    if (newLhs.terms.length === 0) {\n      if (newLhs.constant().equalTo(newRhs.constant())) {\n        return new Fraction(1, 1);\n      } else {\n        throw new EvalError(\"No Solution\");\n      }\n    }\n\n    newRhs = newRhs.divide(newLhs.terms[0].coefficient());\n\n    if (newRhs.terms.length === 0) {\n      return newRhs.constant().reduce();\n    }\n\n    newRhs._sort();\n\n    return newRhs; // Otherwise, move everything to the LHS.\n  } else {\n    var newLhs = this.lhs.copy();\n    newLhs = newLhs.subtract(this.rhs); // If there are no terms left after this rearrangement and the constant is 0, there are infinite solutions.\n    // Otherwise, there are no solutions.\n\n    if (newLhs.terms.length === 0) {\n      if (newLhs.constant().valueOf() === 0) {\n        return [new Fraction(1, 1)];\n      } else {\n        throw new EvalError(\"No Solution\");\n      } // Otherwise, check degree and solve.\n\n    } else if (this._isQuadratic(variable)) {\n      var coefs = newLhs._quadraticCoefficients();\n\n      var a = coefs.a;\n      var b = coefs.b;\n      var c = coefs.c; // Calculate the discriminant, b^2 - 4ac.\n\n      var discriminant = b.pow(2).subtract(a.multiply(c).multiply(4)); // If the discriminant is greater than or equal to 0, there is at least one real root.\n\n      if (discriminant.valueOf() >= 0) {\n        // If the discriminant is equal to 0, there is one real root: -b / 2a.\n        if (discriminant.valueOf() === 0) {\n          return [b.multiply(-1).divide(a.multiply(2)).reduce()]; // If the discriminant is greater than 0, there are two real roots:\n          // (-b - √discriminant) / 2a\n          // (-b + √discriminant) / 2a\n        } else {\n          var squareRootDiscriminant; // If the answers will be rational, return reduced Fraction objects.\n\n          if (discriminant._squareRootIsRational()) {\n            squareRootDiscriminant = discriminant.pow(0.5);\n            var root1 = b.multiply(-1).subtract(squareRootDiscriminant).divide(a.multiply(2));\n            var root2 = b.multiply(-1).add(squareRootDiscriminant).divide(a.multiply(2));\n            return [root1.reduce(), root2.reduce()]; // If the answers will be irrational, return numbers.\n          } else {\n            squareRootDiscriminant = Math.sqrt(discriminant.valueOf());\n            a = a.valueOf();\n            b = b.valueOf();\n            var root1 = (-b - squareRootDiscriminant) / (2 * a);\n            var root2 = (-b + squareRootDiscriminant) / (2 * a);\n            return [root1, root2];\n          }\n        } // If the discriminant is negative, there are no real roots.\n\n      } else {\n        return [];\n      }\n    } else if (this._isCubic(variable)) {\n      var coefs = newLhs._cubicCoefficients();\n\n      var a = coefs.a;\n      var b = coefs.b;\n      var c = coefs.c;\n      var d = coefs.d; // Calculate D and D0.\n\n      var D = a.multiply(b).multiply(c).multiply(d).multiply(18);\n      D = D.subtract(b.pow(3).multiply(d).multiply(4));\n      D = D.add(b.pow(2).multiply(c.pow(2)));\n      D = D.subtract(a.multiply(c.pow(3)).multiply(4));\n      D = D.subtract(a.pow(2).multiply(d.pow(2)).multiply(27));\n      var D0 = b.pow(2).subtract(a.multiply(c).multiply(3)); // Check for special cases when D = 0.\n\n      if (D.valueOf() === 0) {\n        // If D = D0 = 0, there is one distinct real root, -b / 3a.\n        if (D0.valueOf() === 0) {\n          var root1 = b.multiply(-1).divide(a.multiply(3));\n          return [root1.reduce()]; // Otherwise, if D0 != 0, there are two distinct real roots.\n          // 9ad - bc / 2D0\n          // 4abc - 9a^2d - b^3 / aD0\n        } else {\n          var root1 = a.multiply(b).multiply(c).multiply(4);\n          root1 = root1.subtract(a.pow(2).multiply(d).multiply(9));\n          root1 = root1.subtract(b.pow(3));\n          root1 = root1.divide(a.multiply(D0));\n          var root2 = a.multiply(d).multiply(9).subtract(b.multiply(c)).divide(D0.multiply(2));\n          return [root1.reduce(), root2.reduce()];\n        } // Otherwise, use a different method for solving.\n\n      } else {\n        var f = (3 * (c / a) - Math.pow(b, 2) / Math.pow(a, 2)) / 3;\n        var g = 2 * Math.pow(b, 3) / Math.pow(a, 3);\n        g = g - 9 * b * c / Math.pow(a, 2);\n        g = g + 27 * d / a;\n        g = g / 27;\n        var h = Math.pow(g, 2) / 4 + Math.pow(f, 3) / 27;\n        /*\n        \tif f = g = h = 0 then roots are equal (has been already taken care of!)\n        \tif h>0, only one real root\n        \tif h<=0, all three roots are real\n        */\n\n        if (h > 0) {\n          var R = -(g / 2) + Math.sqrt(h);\n          var S = Math.cbrt(R);\n          var T = -(g / 2) - Math.sqrt(h);\n          var U = Math.cbrt(T);\n          var root1 = S + U - b / (3 * a);\n          /* Round off the roots if the difference between absolute value of ceil and number is < e-15*/\n\n          if (root1 < 0) {\n            var Croot1 = Math.floor(root1);\n            if (root1 - Croot1 < 1e-15) root1 = Croot1;\n          } else if (root1 > 0) {\n            var Croot1 = Math.ceil(root1);\n            if (Croot1 - root1 < 1e-15) root1 = Croot1;\n          }\n\n          return [root1];\n        } else {\n          var i = Math.sqrt(Math.pow(g, 2) / 4 - h);\n          var j = Math.cbrt(i);\n          var k = Math.acos(-(g / (2 * i)));\n          var L = -j;\n          var M = Math.cos(k / 3);\n          var N = Math.sqrt(3) * Math.sin(k / 3);\n          var P = -(b / (3 * a));\n          var root1 = 2 * j * Math.cos(k / 3) - b / (3 * a);\n          var root2 = L * (M + N) + P;\n          var root3 = L * (M - N) + P;\n          /* Round off the roots if the difference between absolute value of ceil and number is < e-15*/\n\n          if (root1 < 0) {\n            var Croot1 = Math.floor(root1);\n            if (root1 - Croot1 < 1e-15) root1 = Croot1;\n          } else if (root1 > 0) {\n            var Croot1 = Math.ceil(root1);\n            if (Croot1 - root1 < 1e-15) root1 = Croot1;\n          }\n\n          if (root2 < 0) {\n            var Croot2 = Math.floor(root2);\n            if (root2 - Croot2 < 1e-15) root2 = Croot2;\n          } else if (root2 > 0) {\n            var Croot2 = Math.ceil(root2);\n            if (Croot2 - root2 < 1e-15) root2 = Croot2;\n          }\n\n          if (root1 < 0) {\n            var Croot3 = Math.floor(root3);\n            if (root3 - Croot3 < 1e-15) root3 = Croot3;\n          } else if (root3 > 0) {\n            var Croot3 = Math.ceil(root3);\n            if (Croot3 - root3 < 1e-15) root3 = Croot3;\n          }\n\n          var roots = [root1, root2, root3];\n          roots.sort(function (a, b) {\n            return a - b;\n          }); // roots in ascending order\n\n          return [roots[0], roots[1], roots[2]];\n        }\n      }\n    }\n  }\n};\n\nEquation.prototype.eval = function (values) {\n  return new Equation(this.lhs.eval(values), this.rhs.eval(values));\n};\n\nEquation.prototype.toString = function () {\n  return this.lhs.toString() + \" = \" + this.rhs.toString();\n};\n\nEquation.prototype.toTex = function () {\n  return this.lhs.toTex() + \" = \" + this.rhs.toTex();\n};\n\nEquation.prototype._maxDegree = function () {\n  var lhsMax = this.lhs._maxDegree();\n\n  var rhsMax = this.rhs._maxDegree();\n\n  return Math.max(lhsMax, rhsMax);\n};\n\nEquation.prototype._maxDegreeOfVariable = function (variable) {\n  return Math.max(this.lhs._maxDegreeOfVariable(variable), this.rhs._maxDegreeOfVariable(variable));\n};\n\nEquation.prototype._variableCanBeIsolated = function (variable) {\n  return this._maxDegreeOfVariable(variable) === 1 && this._noCrossProductsWithVariable(variable);\n};\n\nEquation.prototype._noCrossProductsWithVariable = function (variable) {\n  return this.lhs._noCrossProductsWithVariable(variable) && this.rhs._noCrossProductsWithVariable(variable);\n};\n\nEquation.prototype._noCrossProducts = function () {\n  return this.lhs._noCrossProducts() && this.rhs._noCrossProducts();\n};\n\nEquation.prototype._onlyHasVariable = function (variable) {\n  return this.lhs._onlyHasVariable(variable) && this.rhs._onlyHasVariable(variable);\n};\n\nEquation.prototype._isLinear = function () {\n  return this._maxDegree() === 1 && this._noCrossProducts();\n};\n\nEquation.prototype._isQuadratic = function (variable) {\n  return this._maxDegree() === 2 && this._onlyHasVariable(variable);\n};\n\nEquation.prototype._isCubic = function (variable) {\n  return this._maxDegree() === 3 && this._onlyHasVariable(variable);\n};\n\nmodule.exports = Equation;","map":{"version":3,"sources":["/Users/dollina/Desktop/Project/bioinfojs/node_modules/algebra.js/src/equations.js"],"names":["Expression","require","Variable","Term","Fraction","isInt","Equation","lhs","rhs","TypeError","toString","prototype","solveFor","variable","_hasVariable","_isLinear","_variableCanBeIsolated","solvingFor","newLhs","newRhs","i","terms","length","term","canBeCombinedWith","subtract","add","constant","equalTo","EvalError","divide","coefficient","reduce","_sort","copy","valueOf","_isQuadratic","coefs","_quadraticCoefficients","a","b","c","discriminant","pow","multiply","squareRootDiscriminant","_squareRootIsRational","root1","root2","Math","sqrt","_isCubic","_cubicCoefficients","d","D","D0","f","g","h","R","S","cbrt","T","U","Croot1","floor","ceil","j","k","acos","L","M","cos","N","sin","P","root3","Croot2","Croot3","roots","sort","eval","values","toTex","_maxDegree","lhsMax","rhsMax","max","_maxDegreeOfVariable","_noCrossProductsWithVariable","_noCrossProducts","_onlyHasVariable","module","exports"],"mappings":"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","sourcesContent":["var Expression = require('./expressions').Expression;\nvar Variable = require('./expressions').Variable;\nvar Term = require('./expressions').Term;\nvar Fraction = require('./fractions');\nvar isInt = require('./helper').isInt;\n\nvar Equation = function(lhs, rhs) {\n    if (lhs instanceof Expression) {\n        this.lhs = lhs;\n\n        if (rhs instanceof Expression) {\n            this.rhs = rhs;\n        } else if (rhs instanceof Fraction || isInt(rhs)) {\n            this.rhs = new Expression(rhs);\n        } else {\n            throw new TypeError(\"Invalid Argument (\" + rhs.toString() + \"): Right-hand side must be of type Expression, Fraction or Integer.\");\n        }\n    } else {\n        throw new TypeError(\"Invalid Argument (\" + lhs.toString() + \"): Left-hand side must be of type Expression.\");\n    }\n};\n\nEquation.prototype.solveFor = function(variable) {\n    if (!this.lhs._hasVariable(variable) && !this.rhs._hasVariable(variable)) {\n        throw new TypeError(\"Invalid Argument (\" + variable.toString() + \"): Variable does not exist in the equation.\");\n    }\n\n    // If the equation is linear and the variable in question can be isolated through arithmetic, solve.\n    if (this._isLinear() || this._variableCanBeIsolated(variable)) {\n        var solvingFor = new Term(new Variable(variable));\n        var newLhs = new Expression();\n        var newRhs = new Expression();\n\n        for (var i = 0; i < this.rhs.terms.length; i++) {\n            var term = this.rhs.terms[i];\n\n            if (term.canBeCombinedWith(solvingFor)) {\n                newLhs = newLhs.subtract(term);\n            } else {\n                newRhs = newRhs.add(term);\n            }\n        }\n\n        for (var i = 0; i < this.lhs.terms.length; i++) {\n            var term = this.lhs.terms[i];\n\n            if (term.canBeCombinedWith(solvingFor)) {\n                newLhs = newLhs.add(term);\n            } else {\n                newRhs = newRhs.subtract(term);\n            }\n        }\n\n        newRhs = newRhs.subtract(this.lhs.constant());\n        newRhs = newRhs.add(this.rhs.constant());\n\n        if (newLhs.terms.length === 0) {\n            if (newLhs.constant().equalTo(newRhs.constant())) {\n                return new Fraction(1, 1);\n            } else {\n                throw new EvalError(\"No Solution\");\n            }\n        }\n\n        newRhs = newRhs.divide(newLhs.terms[0].coefficient());\n\n        if (newRhs.terms.length === 0) {\n            return newRhs.constant().reduce();\n        }\n\n        newRhs._sort();\n        return newRhs;\n\n    // Otherwise, move everything to the LHS.\n    } else {\n        var newLhs = this.lhs.copy();\n        newLhs = newLhs.subtract(this.rhs);\n\n        // If there are no terms left after this rearrangement and the constant is 0, there are infinite solutions.\n        // Otherwise, there are no solutions.\n        if (newLhs.terms.length === 0) {\n            if (newLhs.constant().valueOf() === 0) {\n                return [new Fraction(1, 1)];\n            } else {\n                throw new EvalError(\"No Solution\");\n            }\n\n        // Otherwise, check degree and solve.\n        } else if (this._isQuadratic(variable)) {\n            var coefs = newLhs._quadraticCoefficients();\n\n            var a = coefs.a;\n            var b = coefs.b;\n            var c = coefs.c;\n\n            // Calculate the discriminant, b^2 - 4ac.\n            var discriminant = b.pow(2).subtract(a.multiply(c).multiply(4));\n\n            // If the discriminant is greater than or equal to 0, there is at least one real root.\n            if (discriminant.valueOf() >= 0) {\n                // If the discriminant is equal to 0, there is one real root: -b / 2a.\n                if (discriminant.valueOf() === 0) {\n                    return [b.multiply(-1).divide(a.multiply(2)).reduce()];\n\n                    // If the discriminant is greater than 0, there are two real roots:\n                    // (-b - √discriminant) / 2a\n                    // (-b + √discriminant) / 2a\n                } else {\n                    var squareRootDiscriminant;\n\n                    // If the answers will be rational, return reduced Fraction objects.\n                    if (discriminant._squareRootIsRational()) {\n                        squareRootDiscriminant = discriminant.pow(0.5);\n                        var root1 = b.multiply(-1).subtract(squareRootDiscriminant).divide(a.multiply(2));\n                        var root2 = b.multiply(-1).add(squareRootDiscriminant).divide(a.multiply(2));\n                        return [root1.reduce(), root2.reduce()];\n                        // If the answers will be irrational, return numbers.\n                    } else {\n                        squareRootDiscriminant = Math.sqrt(discriminant.valueOf());\n                        a = a.valueOf();\n                        b = b.valueOf();\n\n                        var root1 = (-b - squareRootDiscriminant) / (2*a);\n                        var root2 = (-b + squareRootDiscriminant) / (2*a);\n                        return [root1, root2];\n                    }\n                }\n                // If the discriminant is negative, there are no real roots.\n            } else {\n                return [];\n            }\n        } else if (this._isCubic(variable)) {\n            var coefs = newLhs._cubicCoefficients();\n\n            var a = coefs.a;\n            var b = coefs.b;\n            var c = coefs.c;\n            var d = coefs.d;\n\n            // Calculate D and D0.\n            var D = a.multiply(b).multiply(c).multiply(d).multiply(18);\n            D = D.subtract(b.pow(3).multiply(d).multiply(4));\n            D = D.add(b.pow(2).multiply(c.pow(2)));\n            D = D.subtract(a.multiply(c.pow(3)).multiply(4));\n            D = D.subtract(a.pow(2).multiply(d.pow(2)).multiply(27));\n\n            var D0 = b.pow(2).subtract(a.multiply(c).multiply(3));\n\n            // Check for special cases when D = 0.\n            \n            if (D.valueOf() === 0) {\n            \n                // If D = D0 = 0, there is one distinct real root, -b / 3a.\n                if (D0.valueOf() === 0) {\n                    var root1 = b.multiply(-1).divide(a.multiply(3));\n\n                    return [root1.reduce()];\n                    // Otherwise, if D0 != 0, there are two distinct real roots.\n                    // 9ad - bc / 2D0\n                    // 4abc - 9a^2d - b^3 / aD0\n                } else {\n                    var root1 = a.multiply(b).multiply(c).multiply(4);\n                    root1 = root1.subtract(a.pow(2).multiply(d).multiply(9));\n                    root1 = root1.subtract(b.pow(3));\n                    root1 = root1.divide(a.multiply(D0));\n\n                    var root2 = a.multiply(d).multiply(9).subtract(b.multiply(c)).divide(D0.multiply(2));\n\n                    return [root1.reduce(), root2.reduce()];\n                }\n\n                // Otherwise, use a different method for solving.\n            } else {\n               var f = ((3*(c/a)) - ((Math.pow(b, 2))/(Math.pow(a, 2))))/3;\n               var g = (2*(Math.pow(b, 3))/(Math.pow(a, 3)));\n               g = g - (9*b*c/(Math.pow(a, 2)));\n               g = g + (27*d)/a;\n               g = g/27;\n               var h = (Math.pow(g, 2)/4) + (Math.pow(f, 3)/27);\n\n               /*\n               \tif f = g = h = 0 then roots are equal (has been already taken care of!)\n               \tif h>0, only one real root\n               \tif h<=0, all three roots are real\n               */\n               \n               if(h>0)\n               {\n               \t\t\n               \t\tvar R = -(g/2) + Math.sqrt(h);\n               \t\tvar S = Math.cbrt(R);\n               \t\tvar T = -(g/2) - Math.sqrt(h);\n               \t\tvar U = Math.cbrt(T);\n               \t\tvar root1 = (S+U) - (b/(3*a));\n               \t\t/* Round off the roots if the difference between absolute value of ceil and number is < e-15*/\n               \t\tif(root1<0)\n               \t\t{\n               \t\t\tvar Croot1 = Math.floor(root1);\n               \t\t\tif(root1 - Croot1 < 1e-15)\n               \t\t\t\troot1 = Croot1;\n               \t\t}\n               \t\telse if(root1>0)\n               \t\t{\n               \t\t\tvar Croot1 = Math.ceil(root1);\n               \t\t\tif(Croot1 - root1 < 1e-15)\n               \t\t\t\troot1 = Croot1;\n               \t\t}\n               \t\t\n               \t\treturn [root1];\t\n               }\n               else\n               {\n               \t\tvar i = Math.sqrt(((Math.pow(g, 2)/4) - h));\n               \t\tvar j = Math.cbrt(i);\n               \t\t\n               \t\tvar k = Math.acos(-(g/(2*i)));\n               \t\tvar L = -j;\n               \t\tvar M = Math.cos(k/3);\n               \t\tvar N = Math.sqrt(3) * Math.sin(k/3);\n               \t\tvar P = -(b/(3*a));\n               \t\t\n               \t\tvar root1 = 2*j*Math.cos(k/3) - (b/(3*a));\n               \t\tvar root2 = L*(M+N) + P;\n               \t\tvar root3 = L*(M-N) + P;\n               \t\t\n               \t\t\n               \t\t/* Round off the roots if the difference between absolute value of ceil and number is < e-15*/\n               \t\tif(root1<0)\n               \t\t{\n               \t\t\tvar Croot1 = Math.floor(root1);\n               \t\t\tif(root1 - Croot1 < 1e-15)\n               \t\t\t\troot1 = Croot1;\n               \t\t}\n               \t\telse if(root1>0)\n               \t\t{\n               \t\t\tvar Croot1 = Math.ceil(root1);\n               \t\t\tif(Croot1 - root1 < 1e-15)\n               \t\t\t\troot1 = Croot1;\n               \t\t}\n               \t\t\n               \t\tif(root2<0)\n               \t\t{\n               \t\t\tvar Croot2 = Math.floor(root2);\n               \t\t\tif(root2 - Croot2 < 1e-15)\n               \t\t\t\troot2 = Croot2;\n               \t\t}\n               \t\telse if(root2>0)\n               \t\t{\n               \t\t\tvar Croot2 = Math.ceil(root2);\n               \t\t\tif(Croot2 - root2 < 1e-15)\n               \t\t\t\troot2 = Croot2;\n               \t\t}\n               \t\t\n               \t\tif(root1<0)\n               \t\t{\n               \t\t\tvar Croot3 = Math.floor(root3);\n               \t\t\tif(root3 - Croot3 < 1e-15)\n               \t\t\t\troot3 = Croot3;\n               \t\t}\n               \t\telse if(root3>0)\n               \t\t{\n               \t\t\tvar Croot3 = Math.ceil(root3);\n               \t\t\tif(Croot3 - root3 < 1e-15)\n               \t\t\t\troot3 = Croot3;\n               \t\t}\n               \t\t\n               \t\tvar roots = [root1, root2, root3];\n               \t\troots.sort(function(a, b){return a-b;});\t// roots in ascending order\n               \t\t\n               \t\treturn [roots[0], roots[1], roots[2]];\n               \n               }\n               \n            }\n        }\n    }\n};\n\nEquation.prototype.eval = function(values) {\n    return new Equation(this.lhs.eval(values), this.rhs.eval(values));\n};\n\nEquation.prototype.toString = function() {\n    return this.lhs.toString() + \" = \" + this.rhs.toString();\n};\n\nEquation.prototype.toTex = function() {\n    return this.lhs.toTex() + \" = \" + this.rhs.toTex();\n};\n\nEquation.prototype._maxDegree = function() {\n    var lhsMax = this.lhs._maxDegree();\n    var rhsMax = this.rhs._maxDegree();\n    return Math.max(lhsMax, rhsMax);\n};\n\nEquation.prototype._maxDegreeOfVariable = function(variable) {\n    return Math.max(this.lhs._maxDegreeOfVariable(variable), this.rhs._maxDegreeOfVariable(variable));\n};\n\nEquation.prototype._variableCanBeIsolated = function(variable) {\n    return this._maxDegreeOfVariable(variable) === 1 && this._noCrossProductsWithVariable(variable);\n};\n\nEquation.prototype._noCrossProductsWithVariable = function(variable) {\n    return this.lhs._noCrossProductsWithVariable(variable) && this.rhs._noCrossProductsWithVariable(variable);\n};\n\nEquation.prototype._noCrossProducts = function() {\n    return this.lhs._noCrossProducts() && this.rhs._noCrossProducts();\n};\n\nEquation.prototype._onlyHasVariable = function(variable) {\n    return this.lhs._onlyHasVariable(variable) && this.rhs._onlyHasVariable(variable);\n};\n\nEquation.prototype._isLinear = function() {\n    return this._maxDegree() === 1 && this._noCrossProducts();\n};\n\nEquation.prototype._isQuadratic = function(variable) {\n    return this._maxDegree() === 2 && this._onlyHasVariable(variable);\n};\n\nEquation.prototype._isCubic = function(variable) {\n    return this._maxDegree() === 3 && this._onlyHasVariable(variable);\n};\n\nmodule.exports = Equation;\n"]},"metadata":{},"sourceType":"script"}