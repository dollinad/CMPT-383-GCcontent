{"ast":null,"code":"'use strict';\n/*\n  The lexer module is a slightly modified version of the handwritten lexer by Eli Bendersky.\n  The parts not needed like comments and quotes were deleted and some things modified.\n  Comments are left unchanged, the original lexer can be found here:\n  http://eli.thegreenplace.net/2013/07/16/hand-written-lexer-in-javascript-compared-to-the-regex-based-ones\n*/\n\nvar Lexer = function () {\n  this.pos = 0;\n  this.buf = null;\n  this.buflen = 0; // Operator table, mapping operator -> token name\n\n  this.optable = {\n    '+': 'PLUS',\n    '-': 'MINUS',\n    '*': 'MULTIPLY',\n    '/': 'DIVIDE',\n    '^': 'POWER',\n    '(': 'L_PAREN',\n    ')': 'R_PAREN',\n    '=': 'EQUALS'\n  };\n}; // Initialize the Lexer's buffer. This resets the lexer's internal\n// state and subsequent tokens will be returned starting with the\n// beginning of the new buffer.\n\n\nLexer.prototype.input = function (buf) {\n  this.pos = 0;\n  this.buf = buf;\n  this.buflen = buf.length;\n}; // Get the next token from the current buffer. A token is an object with\n// the following properties:\n// - type: name of the pattern that this token matched (taken from rules).\n// - value: actual string value of the token.\n// - pos: offset in the current buffer where the token starts.\n//\n// If there are no more tokens in the buffer, returns null. In case of\n// an error throws Error.\n\n\nLexer.prototype.token = function () {\n  this._skipnontokens();\n\n  if (this.pos >= this.buflen) {\n    return null;\n  } // The char at this.pos is part of a real token. Figure out which.\n\n\n  var c = this.buf.charAt(this.pos); // Look it up in the table of operators\n\n  var op = this.optable[c];\n\n  if (op !== undefined) {\n    if (op === 'L_PAREN' || op === 'R_PAREN') {\n      return {\n        type: 'PAREN',\n        value: op,\n        pos: this.pos++\n      };\n    } else {\n      return {\n        type: 'OPERATOR',\n        value: op,\n        pos: this.pos++\n      };\n    }\n  } else {\n    // Not an operator - so it's the beginning of another token.\n    if (Lexer._isalpha(c)) {\n      return this._process_identifier();\n    } else if (Lexer._isdigit(c)) {\n      return this._process_number();\n    } else {\n      throw new SyntaxError('Token error at character ' + c + ' at position ' + this.pos);\n    }\n  }\n};\n\nLexer._isdigit = function (c) {\n  return c >= '0' && c <= '9';\n};\n\nLexer._isalpha = function (c) {\n  return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z';\n};\n\nLexer._isalphanum = function (c) {\n  return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9';\n};\n\nLexer.prototype._process_digits = function (position) {\n  var endpos = position;\n\n  while (endpos < this.buflen && Lexer._isdigit(this.buf.charAt(endpos))) {\n    endpos++;\n  }\n\n  return endpos;\n};\n\nLexer.prototype._process_number = function () {\n  //Read characters until a non-digit character appears\n  var endpos = this._process_digits(this.pos); //If it's a decimal point, continue to read digits\n\n\n  if (this.buf.charAt(endpos) === '.') {\n    endpos = this._process_digits(endpos + 1);\n  } //Check if the last read character is a decimal point.\n  //If it is, ignore it and proceed\n\n\n  if (this.buf.charAt(endpos - 1) === '.') {\n    throw new SyntaxError(\"Decimal point without decimal digits at position \" + (endpos - 1));\n  } //construct the NUMBER token\n\n\n  var tok = {\n    type: 'NUMBER',\n    value: this.buf.substring(this.pos, endpos),\n    pos: this.pos\n  };\n  this.pos = endpos;\n  return tok;\n};\n\nLexer.prototype._process_identifier = function () {\n  var endpos = this.pos + 1;\n\n  while (endpos < this.buflen && Lexer._isalphanum(this.buf.charAt(endpos))) {\n    endpos++;\n  }\n\n  var tok = {\n    type: 'IDENTIFIER',\n    value: this.buf.substring(this.pos, endpos),\n    pos: this.pos\n  };\n  this.pos = endpos;\n  return tok;\n};\n\nLexer.prototype._skipnontokens = function () {\n  while (this.pos < this.buflen) {\n    var c = this.buf.charAt(this.pos);\n\n    if (c == ' ' || c == '\\t' || c == '\\r' || c == '\\n') {\n      this.pos++;\n    } else {\n      break;\n    }\n  }\n};\n\nmodule.exports = Lexer;","map":{"version":3,"sources":["/Users/dollina/Desktop/Project/bioinfojs/node_modules/algebra.js/src/lexer.js"],"names":["Lexer","pos","buf","buflen","optable","prototype","input","length","token","_skipnontokens","c","charAt","op","undefined","type","value","_isalpha","_process_identifier","_isdigit","_process_number","SyntaxError","_isalphanum","_process_digits","position","endpos","tok","substring","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/*\n  The lexer module is a slightly modified version of the handwritten lexer by Eli Bendersky.\n  The parts not needed like comments and quotes were deleted and some things modified.\n  Comments are left unchanged, the original lexer can be found here:\n  http://eli.thegreenplace.net/2013/07/16/hand-written-lexer-in-javascript-compared-to-the-regex-based-ones\n*/\n\nvar Lexer = function() {\n  this.pos = 0;\n  this.buf = null;\n  this.buflen = 0;\n\n  // Operator table, mapping operator -> token name\n  this.optable = {\n    '+':  'PLUS',\n    '-':  'MINUS',\n    '*':  'MULTIPLY',\n    '/':  'DIVIDE',\n    '^':  'POWER',\n    '(':  'L_PAREN',\n    ')':  'R_PAREN',\n    '=':  'EQUALS'\n  };\n};\n\n// Initialize the Lexer's buffer. This resets the lexer's internal\n// state and subsequent tokens will be returned starting with the\n// beginning of the new buffer.\nLexer.prototype.input = function(buf) {\n  this.pos = 0;\n  this.buf = buf;\n  this.buflen = buf.length;\n};\n\n// Get the next token from the current buffer. A token is an object with\n// the following properties:\n// - type: name of the pattern that this token matched (taken from rules).\n// - value: actual string value of the token.\n// - pos: offset in the current buffer where the token starts.\n//\n// If there are no more tokens in the buffer, returns null. In case of\n// an error throws Error.\nLexer.prototype.token = function() {\n  this._skipnontokens();\n  if (this.pos >= this.buflen) {\n    return null;\n  }\n\n  // The char at this.pos is part of a real token. Figure out which.\n  var c = this.buf.charAt(this.pos);\n   // Look it up in the table of operators\n  var op = this.optable[c];\n  if (op !== undefined) {\n    if(op === 'L_PAREN' || op === 'R_PAREN'){\n       return {type: 'PAREN', value: op, pos: this.pos++};  \n    }else{\n      return {type: 'OPERATOR', value: op, pos: this.pos++};  \n    }\n  } else {\n    // Not an operator - so it's the beginning of another token.\n    if (Lexer._isalpha(c)) {\n      return this._process_identifier();\n    } else if (Lexer._isdigit(c)) {\n      return this._process_number();\n    } else {\n      throw new SyntaxError('Token error at character ' + c + ' at position ' + this.pos);\n    }\n  }\n};\n\nLexer._isdigit = function(c) {\n  return c >= '0' && c <= '9';\n};\n\nLexer._isalpha = function(c) {\n  return (c >= 'a' && c <= 'z') ||\n         (c >= 'A' && c <= 'Z');\n};\n\nLexer._isalphanum = function(c) {\n  return (c >= 'a' && c <= 'z') ||\n         (c >= 'A' && c <= 'Z') ||\n         (c >= '0' && c <= '9');\n};\n\nLexer.prototype._process_digits = function(position){\n  var endpos = position;\n  while (endpos < this.buflen &&\n        (Lexer._isdigit(this.buf.charAt(endpos)))){\n    endpos++;\n  }\n  return endpos;\n};\n\nLexer.prototype._process_number = function() {\n  //Read characters until a non-digit character appears\n  var endpos = this._process_digits(this.pos);\n  //If it's a decimal point, continue to read digits\n  if(this.buf.charAt(endpos) === '.'){\n    endpos = this._process_digits(endpos + 1);\n  }\n  //Check if the last read character is a decimal point.\n  //If it is, ignore it and proceed\n  if(this.buf.charAt(endpos-1) === '.'){\n    throw new SyntaxError(\"Decimal point without decimal digits at position \" + (endpos-1));\n  } \n  //construct the NUMBER token\n  var tok = {\n    type: 'NUMBER',\n    value: this.buf.substring(this.pos, endpos),\n    pos: this.pos\n  };\n  this.pos = endpos;\n  return tok;\n};\n\nLexer.prototype._process_identifier = function() {\n  var endpos = this.pos + 1;\n  while (endpos < this.buflen &&\n         Lexer._isalphanum(this.buf.charAt(endpos))) {\n    endpos++;\n  }\n\n  var tok = {\n    type: 'IDENTIFIER',\n    value: this.buf.substring(this.pos, endpos),\n    pos: this.pos\n  };\n  this.pos = endpos;\n  return tok;\n};\n\nLexer.prototype._skipnontokens = function() {\n  while (this.pos < this.buflen) {\n    var c = this.buf.charAt(this.pos);\n    if (c == ' ' || c == '\\t' || c == '\\r' || c == '\\n') {\n      this.pos++;\n    } else {\n      break;\n    }\n  }\n};\n\nmodule.exports = Lexer;\n"]},"metadata":{},"sourceType":"script"}