{"ast":null,"code":"var _jsxFileName = \"/Users/dollina/Desktop/Project/bioinfojs/src/GCOutput.js\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport { API_URL } from \"./constants/index.js\";\nimport { Bar } from \"react-chartjs-2\";\nimport { MDBContainer } from \"mdbreact\";\nimport GCInput from \"./GCInput\";\nimport { render } from '@testing-library/react';\nimport { Row, Container } from 'react-bootstrap';\nimport { Col } from 'react-bootstrap';\n\nclass GCOutput extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      sequences: [],\n      dataBar: {\n        labels: [\"A\", \"C\", \"G\", \"T\"],\n        datasets: [{\n          label: \"Number of nucleotides\",\n          data: [4, 5, 9, 10],\n          backgroundColor: [\"rgba(255, 134,159,0.4)\", \"rgba(98,  182, 239,0.4)\", \"rgba(255, 218, 128,0.4)\", \"rgba(113, 205, 205,0.4)\"],\n          borderWidth: 2,\n          borderColor: [\"rgba(255, 134, 159, 1)\", \"rgba(98,  182, 239, 1)\", \"rgba(255, 218, 128, 1)\", \"rgba(113, 205, 205, 1)\"]\n        }]\n      },\n      barChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          xAxes: [{\n            barPercentage: 1,\n            gridLines: {\n              display: true,\n              color: \"rgba(0, 0, 0, 0.1)\"\n            }\n          }],\n          yAxes: [{\n            gridLines: {\n              display: true,\n              color: \"rgba(0, 0, 0, 0.1)\"\n            },\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    axios.get(API_URL).then(res => {\n      this.setState({\n        sequences: [res.data]\n      });\n      console.log(\"COMING\", res.data);\n      console.log(\"SEquences\", this.state.sequences);\n    });\n  }\n\n  render() {\n    const {\n      sequences\n    } = this.state.sequences;\n    axios.get(API_URL).then(res => {\n      this.setState({\n        sequences: [res.data]\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, this.state.sequences.map(value => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: value.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 33\n        }\n      }, \"A: \", /*#__PURE__*/React.createElement(\"textarea\", {\n        value: value.a,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 41\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 33\n        }\n      }, \"C: \", /*#__PURE__*/React.createElement(\"textarea\", {\n        value: value.c,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 41\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 33\n        }\n      }, \"G: \", /*#__PURE__*/React.createElement(\"textarea\", {\n        value: value.g,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 41\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 33\n        }\n      }, \"T: \", /*#__PURE__*/React.createElement(\"textarea\", {\n        value: value.t,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 41\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 33\n        }\n      }, \"GC: \", /*#__PURE__*/React.createElement(\"textarea\", {\n        value: value.gc,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 42\n        }\n      })), console.log(this.state.dataBar.datasets));\n    })), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(MDBContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }\n    }, \"Plot\"), /*#__PURE__*/React.createElement(Bar, {\n      data: this.state.dataBar,\n      options: this.state.barChartOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default GCOutput;","map":{"version":3,"sources":["/Users/dollina/Desktop/Project/bioinfojs/src/GCOutput.js"],"names":["React","Component","axios","API_URL","Bar","MDBContainer","GCInput","render","Row","Container","Col","GCOutput","state","sequences","dataBar","labels","datasets","label","data","backgroundColor","borderWidth","borderColor","barChartOptions","responsive","maintainAspectRatio","scales","xAxes","barPercentage","gridLines","display","color","yAxes","ticks","beginAtZero","componentDidMount","get","then","res","setState","console","log","map","value","id","a","c","g","t","gc"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axios from \"axios\"\nimport { API_URL } from \"./constants/index.js\"\nimport { Bar } from \"react-chartjs-2\";\nimport { MDBContainer } from \"mdbreact\";\n\n\nimport GCInput from \"./GCInput\"\nimport { render } from '@testing-library/react'\nimport { Row, Container } from 'react-bootstrap'\nimport { Col } from 'react-bootstrap'\n\nclass GCOutput extends React.Component {\n    state = {\n        sequences: [],\n        dataBar: {\n            labels: [\"A\", \"C\", \"G\", \"T\"],\n            datasets: [\n              {\n                label: \"Number of nucleotides\",\n                data: [4, 5, 9, 10],\n                backgroundColor: [\n                  \"rgba(255, 134,159,0.4)\",\n                  \"rgba(98,  182, 239,0.4)\",\n                  \"rgba(255, 218, 128,0.4)\",\n                  \"rgba(113, 205, 205,0.4)\",\n                ],\n                borderWidth: 2,\n                borderColor: [\n                  \"rgba(255, 134, 159, 1)\",\n                  \"rgba(98,  182, 239, 1)\",\n                  \"rgba(255, 218, 128, 1)\",\n                  \"rgba(113, 205, 205, 1)\",\n                ]\n              }\n            ]\n          },\n          barChartOptions: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              xAxes: [\n                {\n                  barPercentage: 1,\n                  gridLines: {\n                    display: true,\n                    color: \"rgba(0, 0, 0, 0.1)\"\n                  }\n                }\n              ],\n              yAxes: [\n                {\n                  gridLines: {\n                    display: true,\n                    color: \"rgba(0, 0, 0, 0.1)\"\n                  },\n                  ticks: {\n                    beginAtZero: true\n                  }\n                }\n              ]\n            }\n          }\n        }\n\n    componentDidMount() {\n        axios.get(API_URL)\n            .then(res => {this.setState({sequences: [res.data]})\n            console.log(\"COMING\", res.data)\n            console.log(\"SEquences\", this.state.sequences)\n        })\n        \n    }\n\n    render() {\n        const { sequences } = this.state.sequences\n        axios.get(API_URL)\n            .then(res => {this.setState({sequences: [res.data]})\n        })\n        return (\n            <div>\n                <Row>\n                    {this.state.sequences.map((value)=> {\n                        return (\n                            <div key={value.id}>\n                                <Col>A: <textarea value={value.a}/></Col>\n                                <Col>C: <textarea value={value.c}/></Col>\n                                <Col>G: <textarea value={value.g}/></Col>\n                                <Col>T: <textarea value={value.t}/></Col>\n                                <Col>GC: <textarea value={value.gc}/></Col>\n                                {console.log(this.state.dataBar.datasets)}\n                            </div>\n                        )\n                    })}\n                </Row>\n                <Row>\n                    <MDBContainer>\n                        <h3 className=\"mt-5\">Plot</h3>\n                        <Bar data={this.state.dataBar} options={this.state.barChartOptions} />\n                    </MDBContainer>\n                </Row>\n            </div>   \n        )\n    }\n}\n        \n\n\nexport default GCOutput;"]},"metadata":{},"sourceType":"module"}