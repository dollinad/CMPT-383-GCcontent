{"ast":null,"code":"var isInt = require('./helper').isInt;\n\nvar gcd = require('./helper').gcd;\n\nvar lcm = require('./helper').lcm;\n\nvar Fraction = function (a, b) {\n  if (b === 0) {\n    throw new EvalError(\"Divide By Zero\");\n  } else if (isInt(a) && isInt(b)) {\n    this.numer = a;\n    this.denom = b;\n  } else {\n    throw new TypeError(\"Invalid Argument (\" + a.toString() + \",\" + b.toString() + \"): Divisor and dividend must be of type Integer.\");\n  }\n};\n\nFraction.prototype.copy = function () {\n  return new Fraction(this.numer, this.denom);\n};\n\nFraction.prototype.reduce = function () {\n  var copy = this.copy();\n  var g = gcd(copy.numer, copy.denom);\n  copy.numer = copy.numer / g;\n  copy.denom = copy.denom / g;\n\n  if (Math.sign(copy.denom) == -1 && Math.sign(copy.numer) == 1) {\n    copy.numer *= -1;\n    copy.denom *= -1;\n  }\n\n  return copy;\n};\n\nFraction.prototype.equalTo = function (fraction) {\n  if (fraction instanceof Fraction) {\n    var thisReduced = this.reduce();\n    var thatReduced = fraction.reduce();\n    return thisReduced.numer === thatReduced.numer && thisReduced.denom === thatReduced.denom;\n  } else {\n    return false;\n  }\n};\n\nFraction.prototype.add = function (f, simplify) {\n  simplify = simplify === undefined ? true : simplify;\n  var a, b;\n\n  if (f instanceof Fraction) {\n    a = f.numer;\n    b = f.denom;\n  } else if (isInt(f)) {\n    a = f;\n    b = 1;\n  } else {\n    throw new TypeError(\"Invalid Argument (\" + f.toString() + \"): Summand must be of type Fraction or Integer.\");\n  }\n\n  var copy = this.copy();\n\n  if (this.denom == b) {\n    copy.numer += a;\n  } else {\n    var m = lcm(copy.denom, b);\n    var thisM = m / copy.denom;\n    var otherM = m / b;\n    copy.numer *= thisM;\n    copy.denom *= thisM;\n    a *= otherM;\n    copy.numer += a;\n  }\n\n  return simplify ? copy.reduce() : copy;\n};\n\nFraction.prototype.subtract = function (f, simplify) {\n  simplify = simplify === undefined ? true : simplify;\n  var copy = this.copy();\n\n  if (f instanceof Fraction) {\n    return copy.add(new Fraction(-f.numer, f.denom), simplify);\n  } else if (isInt(f)) {\n    return copy.add(new Fraction(-f, 1), simplify);\n  } else {\n    throw new TypeError(\"Invalid Argument (\" + f.toString() + \"): Subtrahend must be of type Fraction or Integer.\");\n  }\n};\n\nFraction.prototype.multiply = function (f, simplify) {\n  simplify = simplify === undefined ? true : simplify;\n  var a, b;\n\n  if (f instanceof Fraction) {\n    a = f.numer;\n    b = f.denom;\n  } else if (isInt(f) && f) {\n    a = f;\n    b = 1;\n  } else if (f === 0) {\n    a = 0;\n    b = 1;\n  } else {\n    throw new TypeError(\"Invalid Argument (\" + f.toString() + \"): Multiplicand must be of type Fraction or Integer.\");\n  }\n\n  var copy = this.copy();\n  copy.numer *= a;\n  copy.denom *= b;\n  return simplify ? copy.reduce() : copy;\n};\n\nFraction.prototype.divide = function (f, simplify) {\n  simplify = simplify === undefined ? true : simplify;\n\n  if (f.valueOf() === 0) {\n    throw new EvalError(\"Divide By Zero\");\n  }\n\n  var copy = this.copy();\n\n  if (f instanceof Fraction) {\n    return copy.multiply(new Fraction(f.denom, f.numer), simplify);\n  } else if (isInt(f)) {\n    return copy.multiply(new Fraction(1, f), simplify);\n  } else {\n    throw new TypeError(\"Invalid Argument (\" + f.toString() + \"): Divisor must be of type Fraction or Integer.\");\n  }\n};\n\nFraction.prototype.pow = function (n, simplify) {\n  simplify = simplify === undefined ? true : simplify;\n  var copy = this.copy();\n  copy.numer = Math.pow(copy.numer, n);\n  copy.denom = Math.pow(copy.denom, n);\n  return simplify ? copy.reduce() : copy;\n};\n\nFraction.prototype.abs = function () {\n  var copy = this.copy();\n  copy.numer = Math.abs(copy.numer);\n  copy.denom = Math.abs(copy.denom);\n  return copy;\n};\n\nFraction.prototype.valueOf = function () {\n  return this.numer / this.denom;\n};\n\nFraction.prototype.toString = function () {\n  if (this.numer === 0) {\n    return \"0\";\n  } else if (this.denom === 1) {\n    return this.numer.toString();\n  } else if (this.denom === -1) {\n    return (-this.numer).toString();\n  } else {\n    return this.numer + \"/\" + this.denom;\n  }\n};\n\nFraction.prototype.toTex = function () {\n  if (this.numer === 0) {\n    return \"0\";\n  } else if (this.denom === 1) {\n    return this.numer.toString();\n  } else if (this.denom === -1) {\n    return (-this.numer).toString();\n  } else {\n    return \"\\\\frac{\" + this.numer + \"}{\" + this.denom + \"}\";\n  }\n};\n\nFraction.prototype._squareRootIsRational = function () {\n  if (this.valueOf() === 0) {\n    return true;\n  }\n\n  var sqrtNumer = Math.sqrt(this.numer);\n  var sqrtDenom = Math.sqrt(this.denom);\n  return isInt(sqrtNumer) && isInt(sqrtDenom);\n};\n\nFraction.prototype._cubeRootIsRational = function () {\n  if (this.valueOf() === 0) {\n    return true;\n  }\n\n  var cbrtNumer = Math.cbrt(this.numer);\n  var cbrtDenom = Math.cbrt(this.denom);\n  return isInt(cbrtNumer) && isInt(cbrtDenom);\n};\n\nmodule.exports = Fraction;","map":{"version":3,"sources":["/Users/dollina/Desktop/Project/bioinfojs/node_modules/algebra.js/src/fractions.js"],"names":["isInt","require","gcd","lcm","Fraction","a","b","EvalError","numer","denom","TypeError","toString","prototype","copy","reduce","g","Math","sign","equalTo","fraction","thisReduced","thatReduced","add","f","simplify","undefined","m","thisM","otherM","subtract","multiply","divide","valueOf","pow","n","abs","toTex","_squareRootIsRational","sqrtNumer","sqrt","sqrtDenom","_cubeRootIsRational","cbrtNumer","cbrt","cbrtDenom","module","exports"],"mappings":"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","sourcesContent":["var isInt = require('./helper').isInt;\nvar gcd = require('./helper').gcd;\nvar lcm = require('./helper').lcm;\n\nvar Fraction = function(a, b) {\n    if (b === 0) {\n        throw new EvalError(\"Divide By Zero\");\n    } else if (isInt(a) && isInt(b)) {\n        this.numer = a;\n        this.denom = b;\n    } else {\n        throw new TypeError(\"Invalid Argument (\"+a.toString()+ \",\"+ b.toString() +\"): Divisor and dividend must be of type Integer.\");\n    }\n};\n\nFraction.prototype.copy = function() {\n    return new Fraction(this.numer, this.denom);\n};\n\nFraction.prototype.reduce = function() {\n    var copy = this.copy();\n\n    var g = gcd(copy.numer, copy.denom);\n    copy.numer = copy.numer / g;\n    copy.denom = copy.denom / g;\n\n    if (Math.sign(copy.denom) == -1 && Math.sign(copy.numer) == 1) {\n        copy.numer *= -1;\n        copy.denom *= -1;\n    }\n\n    return copy;\n};\n\nFraction.prototype.equalTo = function(fraction) {\n    if(fraction instanceof Fraction) {\n        var thisReduced = this.reduce();\n        var thatReduced = fraction.reduce();\n        return thisReduced.numer === thatReduced.numer && thisReduced.denom === thatReduced.denom;\n    }else{\n        return false;\n    }\n};\n\nFraction.prototype.add = function(f, simplify) {\n    simplify = (simplify === undefined ? true : simplify);\n\n    var a, b;\n\n    if (f instanceof Fraction) {\n        a = f.numer;\n        b = f.denom;\n    } else if (isInt(f)) {\n        a = f;\n        b = 1;\n    } else {\n        throw new TypeError(\"Invalid Argument (\" + f.toString() + \"): Summand must be of type Fraction or Integer.\");\n    }\n\n    var copy = this.copy();\n\n    if (this.denom == b) {\n        copy.numer += a;\n    } else {\n        var m = lcm(copy.denom, b);\n        var thisM = m / copy.denom;\n        var otherM = m / b;\n\n        copy.numer *= thisM;\n        copy.denom *= thisM;\n\n        a *= otherM;\n\n        copy.numer += a;\n    }\n\n    return (simplify ? copy.reduce() : copy);\n};\n\nFraction.prototype.subtract = function(f, simplify) {\n    simplify = (simplify === undefined ? true : simplify);\n\n    var copy = this.copy();\n\n    if (f instanceof Fraction) {\n        return copy.add(new Fraction(-f.numer, f.denom), simplify);\n    } else if (isInt(f)) {\n        return copy.add(new Fraction(-f, 1), simplify);\n    } else {\n        throw new TypeError(\"Invalid Argument (\" + f.toString() + \"): Subtrahend must be of type Fraction or Integer.\");\n    }\n};\n\nFraction.prototype.multiply = function(f, simplify) {\n    simplify = (simplify === undefined ? true : simplify);\n\n    var a, b;\n\n    if (f instanceof Fraction) {\n        a = f.numer;\n        b = f.denom;\n    } else if (isInt(f) && f) {\n        a = f;\n        b = 1;\n    } else if (f === 0) {\n        a = 0;\n        b = 1;\n    } else {\n        throw new TypeError(\"Invalid Argument (\" + f.toString() + \"): Multiplicand must be of type Fraction or Integer.\");\n    }\n\n    var copy = this.copy();\n\n    copy.numer *= a;\n    copy.denom *= b;\n\n    return (simplify ? copy.reduce() : copy);\n};\n\nFraction.prototype.divide = function(f, simplify) {\n    simplify = (simplify === undefined ? true : simplify);\n\n    if (f.valueOf() === 0) {\n        throw new EvalError(\"Divide By Zero\");\n    }\n\n    var copy = this.copy();\n\n    if (f instanceof Fraction) {\n        return copy.multiply(new Fraction(f.denom, f.numer), simplify);\n    } else if (isInt(f)) {\n        return copy.multiply(new Fraction(1, f), simplify);\n    } else {\n        throw new TypeError(\"Invalid Argument (\" + f.toString() + \"): Divisor must be of type Fraction or Integer.\");\n    }\n};\n\nFraction.prototype.pow = function(n, simplify) {\n    simplify = (simplify === undefined ? true : simplify);\n\n    var copy = this.copy();\n\n    copy.numer = Math.pow(copy.numer, n);\n    copy.denom = Math.pow(copy.denom, n);\n\n    return (simplify ? copy.reduce() : copy);\n};\n\nFraction.prototype.abs = function() {\n    var copy = this.copy();\n\n    copy.numer = Math.abs(copy.numer);\n    copy.denom = Math.abs(copy.denom);\n\n    return copy;\n};\n\nFraction.prototype.valueOf = function() {\n    return this.numer / this.denom;\n};\n\nFraction.prototype.toString = function() {\n    if (this.numer === 0) {\n        return \"0\";\n    } else if (this.denom === 1) {\n        return this.numer.toString();\n    } else if (this.denom === -1) {\n        return (-this.numer).toString();\n    } else {\n        return this.numer + \"/\" + this.denom;\n    }\n};\n\nFraction.prototype.toTex = function() {\n    if (this.numer === 0) {\n        return \"0\";\n    } else if (this.denom === 1) {\n        return this.numer.toString();\n    } else if (this.denom === -1) {\n        return (-this.numer).toString();\n    } else {\n        return \"\\\\frac{\" + this.numer + \"}{\" + this.denom + \"}\";\n    }\n};\n\nFraction.prototype._squareRootIsRational = function() {\n    if (this.valueOf() === 0) {\n        return true;\n    }\n\n    var sqrtNumer = Math.sqrt(this.numer);\n    var sqrtDenom = Math.sqrt(this.denom);\n\n    return isInt(sqrtNumer) && isInt(sqrtDenom);\n};\n\nFraction.prototype._cubeRootIsRational = function() {\n    if (this.valueOf() === 0) {\n        return true;\n    }\n\n    var cbrtNumer = Math.cbrt(this.numer);\n    var cbrtDenom = Math.cbrt(this.denom);\n\n    return isInt(cbrtNumer) && isInt(cbrtDenom);\n};\n\nmodule.exports = Fraction;"]},"metadata":{},"sourceType":"script"}